
Func2.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .data         0000000e  00800100  0000052a  000005be  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  1 .text         0000052a  00000000  00000000  00000094  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .bss          0000000f  0080010e  0080010e  000005cc  2**0
                  ALLOC
  3 .comment      00000030  00000000  00000000  000005cc  2**0
                  CONTENTS, READONLY
  4 .note.gnu.avr.deviceinfo 0000003c  00000000  00000000  000005fc  2**2
                  CONTENTS, READONLY
  5 .debug_aranges 00000098  00000000  00000000  00000638  2**3
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_info   00000d11  00000000  00000000  000006d0  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_abbrev 0000095b  00000000  00000000  000013e1  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_line   000006e3  00000000  00000000  00001d3c  2**0
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_frame  00000198  00000000  00000000  00002420  2**2
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_str    00000559  00000000  00000000  000025b8  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_loc    000004a6  00000000  00000000  00002b11  2**0
                  CONTENTS, READONLY, DEBUGGING
 12 .debug_ranges 00000068  00000000  00000000  00002fb7  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
   0:	45 c0       	rjmp	.+138    	; 0x8c <__ctors_end>
   2:	00 00       	nop
   4:	9c c0       	rjmp	.+312    	; 0x13e <__vector_1>
   6:	00 00       	nop
   8:	a9 c0       	rjmp	.+338    	; 0x15c <__vector_2>
   a:	00 00       	nop
   c:	b6 c0       	rjmp	.+364    	; 0x17a <__vector_3>
   e:	00 00       	nop
  10:	c3 c0       	rjmp	.+390    	; 0x198 <__vector_4>
  12:	00 00       	nop
  14:	58 c0       	rjmp	.+176    	; 0xc6 <__bad_interrupt>
  16:	00 00       	nop
  18:	56 c0       	rjmp	.+172    	; 0xc6 <__bad_interrupt>
  1a:	00 00       	nop
  1c:	54 c0       	rjmp	.+168    	; 0xc6 <__bad_interrupt>
  1e:	00 00       	nop
  20:	52 c0       	rjmp	.+164    	; 0xc6 <__bad_interrupt>
  22:	00 00       	nop
  24:	50 c0       	rjmp	.+160    	; 0xc6 <__bad_interrupt>
  26:	00 00       	nop
  28:	4e c0       	rjmp	.+156    	; 0xc6 <__bad_interrupt>
  2a:	00 00       	nop
  2c:	4c c0       	rjmp	.+152    	; 0xc6 <__bad_interrupt>
  2e:	00 00       	nop
  30:	4a c0       	rjmp	.+148    	; 0xc6 <__bad_interrupt>
  32:	00 00       	nop
  34:	48 c0       	rjmp	.+144    	; 0xc6 <__bad_interrupt>
  36:	00 00       	nop
  38:	46 c0       	rjmp	.+140    	; 0xc6 <__bad_interrupt>
  3a:	00 00       	nop
  3c:	14 c2       	rjmp	.+1064   	; 0x466 <__vector_15>
  3e:	00 00       	nop
  40:	42 c0       	rjmp	.+132    	; 0xc6 <__bad_interrupt>
  42:	00 00       	nop
  44:	40 c0       	rjmp	.+128    	; 0xc6 <__bad_interrupt>
  46:	00 00       	nop
  48:	3e c0       	rjmp	.+124    	; 0xc6 <__bad_interrupt>
  4a:	00 00       	nop
  4c:	3c c0       	rjmp	.+120    	; 0xc6 <__bad_interrupt>
  4e:	00 00       	nop
  50:	3a c0       	rjmp	.+116    	; 0xc6 <__bad_interrupt>
  52:	00 00       	nop
  54:	38 c0       	rjmp	.+112    	; 0xc6 <__bad_interrupt>
  56:	00 00       	nop
  58:	36 c0       	rjmp	.+108    	; 0xc6 <__bad_interrupt>
  5a:	00 00       	nop
  5c:	34 c0       	rjmp	.+104    	; 0xc6 <__bad_interrupt>
  5e:	00 00       	nop
  60:	32 c0       	rjmp	.+100    	; 0xc6 <__bad_interrupt>
  62:	00 00       	nop
  64:	30 c0       	rjmp	.+96     	; 0xc6 <__bad_interrupt>
  66:	00 00       	nop
  68:	2e c0       	rjmp	.+92     	; 0xc6 <__bad_interrupt>
  6a:	00 00       	nop
  6c:	2c c0       	rjmp	.+88     	; 0xc6 <__bad_interrupt>
  6e:	00 00       	nop
  70:	2a c0       	rjmp	.+84     	; 0xc6 <__bad_interrupt>
  72:	00 00       	nop
  74:	28 c0       	rjmp	.+80     	; 0xc6 <__bad_interrupt>
  76:	00 00       	nop
  78:	26 c0       	rjmp	.+76     	; 0xc6 <__bad_interrupt>
  7a:	00 00       	nop
  7c:	24 c0       	rjmp	.+72     	; 0xc6 <__bad_interrupt>
  7e:	00 00       	nop
  80:	22 c0       	rjmp	.+68     	; 0xc6 <__bad_interrupt>
  82:	00 00       	nop
  84:	20 c0       	rjmp	.+64     	; 0xc6 <__bad_interrupt>
  86:	00 00       	nop
  88:	1e c0       	rjmp	.+60     	; 0xc6 <__bad_interrupt>
	...

0000008c <__ctors_end>:
  8c:	11 24       	eor	r1, r1
  8e:	1f be       	out	0x3f, r1	; 63
  90:	cf ef       	ldi	r28, 0xFF	; 255
  92:	d0 e1       	ldi	r29, 0x10	; 16
  94:	de bf       	out	0x3e, r29	; 62
  96:	cd bf       	out	0x3d, r28	; 61

00000098 <__do_copy_data>:
  98:	11 e0       	ldi	r17, 0x01	; 1
  9a:	a0 e0       	ldi	r26, 0x00	; 0
  9c:	b1 e0       	ldi	r27, 0x01	; 1
  9e:	ea e2       	ldi	r30, 0x2A	; 42
  a0:	f5 e0       	ldi	r31, 0x05	; 5
  a2:	00 e0       	ldi	r16, 0x00	; 0
  a4:	0b bf       	out	0x3b, r16	; 59
  a6:	02 c0       	rjmp	.+4      	; 0xac <__do_copy_data+0x14>
  a8:	07 90       	elpm	r0, Z+
  aa:	0d 92       	st	X+, r0
  ac:	ae 30       	cpi	r26, 0x0E	; 14
  ae:	b1 07       	cpc	r27, r17
  b0:	d9 f7       	brne	.-10     	; 0xa8 <__do_copy_data+0x10>

000000b2 <__do_clear_bss>:
  b2:	21 e0       	ldi	r18, 0x01	; 1
  b4:	ae e0       	ldi	r26, 0x0E	; 14
  b6:	b1 e0       	ldi	r27, 0x01	; 1
  b8:	01 c0       	rjmp	.+2      	; 0xbc <.do_clear_bss_start>

000000ba <.do_clear_bss_loop>:
  ba:	1d 92       	st	X+, r1

000000bc <.do_clear_bss_start>:
  bc:	ad 31       	cpi	r26, 0x1D	; 29
  be:	b2 07       	cpc	r27, r18
  c0:	e1 f7       	brne	.-8      	; 0xba <.do_clear_bss_loop>
  c2:	a5 d1       	rcall	.+842    	; 0x40e <main>
  c4:	30 c2       	rjmp	.+1120   	; 0x526 <_exit>

000000c6 <__bad_interrupt>:
  c6:	9c cf       	rjmp	.-200    	; 0x0 <__vectors>

000000c8 <ler_AD>:
.extern    lerH



ler_AD: 
	  ldi r16, hi8(RAMEND)
  c8:	00 e1       	ldi	r16, 0x10	; 16
out SPH, r16
  ca:	0e bf       	out	0x3e, r16	; 62
ldi r16, lo8(RAMEND)
  cc:	0f ef       	ldi	r16, 0xFF	; 255
out SPL, r16
  ce:	0d bf       	out	0x3d, r16	; 61
     PUSH r16
  d0:	0f 93       	push	r16
     PUSH r17
  d2:	1f 93       	push	r17
     PUSH r18
  d4:	2f 93       	push	r18

     SBI    ADCSRA, 6
  d6:	36 9a       	sbi	0x06, 6	; 6
     IN        r16,    0
  d8:	00 b1       	in	r16, 0x00	; 0
     cpi    r16,    0b01000000
  da:	00 34       	cpi	r16, 0x40	; 64
     brne    ler_AD
  dc:	a9 f7       	brne	.-22     	; 0xc8 <ler_AD>

     IN        r17, ADCL
  de:	14 b1       	in	r17, 0x04	; 4
     IN        r18, ADCH
  e0:	25 b1       	in	r18, 0x05	; 5

     STS    lerL, r17
  e2:	10 93 1b 01 	sts	0x011B, r17	; 0x80011b <lerL>
     STS    lerH, r18
  e6:	20 93 1c 01 	sts	0x011C, r18	; 0x80011c <lerH>

     POP r16
  ea:	0f 91       	pop	r16
     POP r17
  ec:	1f 91       	pop	r17
     POP r18
  ee:	2f 91       	pop	r18
  f0:	08 95       	ret

000000f2 <_Z4inicv>:

/*This is the initialization function where all the starting commands will be performed (such as defining ports and interrupts)*/
void inic(void)
{
	/* Pin 7 and 8 will be used as outputs so we can select which display we intend to use*/
	DDRD = 0b11000000;			
  f2:	80 ec       	ldi	r24, 0xC0	; 192
  f4:	81 bb       	out	0x11, r24	; 17
	/*In this couple of lines we initialize PORTC as output and make sure that all the displays are turned off*/
	DDRC = 0b11111111;
  f6:	8f ef       	ldi	r24, 0xFF	; 255
  f8:	84 bb       	out	0x14, r24	; 20
	DDRF = 0b00000000;
  fa:	10 92 61 00 	sts	0x0061, r1	; 0x800061 <__TEXT_REGION_LENGTH__+0x7e0061>
	screen3 = display[11];
  fe:	80 93 15 01 	sts	0x0115, r24	; 0x800115 <screen3>
	screen2 = display[11];
 102:	80 93 16 01 	sts	0x0116, r24	; 0x800116 <screen2>
	screen1 = display[11];
 106:	80 93 17 01 	sts	0x0117, r24	; 0x800117 <screen1>
	/*PortB is the one used for the motor and is initialized in this 2 lines*/
	DDRB = 0b11100000;
 10a:	80 ee       	ldi	r24, 0xE0	; 224
 10c:	87 bb       	out	0x17, r24	; 23
	PORTB = 0b00100000;
 10e:	80 e2       	ldi	r24, 0x20	; 32
 110:	88 bb       	out	0x18, r24	; 24
	
	/*External interrupts are initialized here which will be used to determine which of the switches were pressed*/
	EICRA = 0b10101010;
 112:	8a ea       	ldi	r24, 0xAA	; 170
 114:	80 93 6a 00 	sts	0x006A, r24	; 0x80006a <__TEXT_REGION_LENGTH__+0x7e006a>
	EICRB = 0b00001010;
 118:	8a e0       	ldi	r24, 0x0A	; 10
 11a:	8a bf       	out	0x3a, r24	; 58
	EIMSK = 0b00111111;
 11c:	8f e3       	ldi	r24, 0x3F	; 63
 11e:	89 bf       	out	0x39, r24	; 57
	/*Here we initialize the Timer/Counter 0 with a prescaler of 1024 giving us a time of 5ms*/
	OCR0 = 77;
 120:	8d e4       	ldi	r24, 0x4D	; 77
 122:	81 bf       	out	0x31, r24	; 49
	TCCR0 = 0b00001111;    
 124:	8f e0       	ldi	r24, 0x0F	; 15
 126:	83 bf       	out	0x33, r24	; 51
	TIMSK |= 0b00000010;    
 128:	87 b7       	in	r24, 0x37	; 55
 12a:	82 60       	ori	r24, 0x02	; 2
 12c:	87 bf       	out	0x37, r24	; 55
	/*OCR2 is where we give the microcontroler the information of the speed we want it to operate in, we forced it to start turned off,
	this uses the Timer/Counter 2 so we also initialized it TC2 witch a prescaler of 64 mode 1 and phase correct*/
	OCR2 = DC(0);
 12e:	13 bc       	out	0x23, r1	; 35
	TCCR2 = 0b01100011;
 130:	83 e6       	ldi	r24, 0x63	; 99
 132:	85 bd       	out	0x25, r24	; 37
	//AD - Only if testing C function
	ADMUX = 0b00000000; //ADC0 channel for the potenciometer
 134:	17 b8       	out	0x07, r1	; 7
	ADCSRA = 0b10000111;
 136:	87 e8       	ldi	r24, 0x87	; 135
 138:	86 b9       	out	0x06, r24	; 6
		
	
	sei();
 13a:	78 94       	sei
 13c:	08 95       	ret

0000013e <__vector_1>:
	display_();
	flag = 1;
}

ISR(INT0_vect) 
{
 13e:	1f 92       	push	r1
 140:	0f 92       	push	r0
 142:	0f b6       	in	r0, 0x3f	; 63
 144:	0f 92       	push	r0
 146:	11 24       	eor	r1, r1
 148:	8f 93       	push	r24
	switch_=1;
 14a:	81 e0       	ldi	r24, 0x01	; 1
 14c:	80 93 1a 01 	sts	0x011A, r24	; 0x80011a <switch_>
}
 150:	8f 91       	pop	r24
 152:	0f 90       	pop	r0
 154:	0f be       	out	0x3f, r0	; 63
 156:	0f 90       	pop	r0
 158:	1f 90       	pop	r1
 15a:	18 95       	reti

0000015c <__vector_2>:

ISR(INT1_vect) 
{
 15c:	1f 92       	push	r1
 15e:	0f 92       	push	r0
 160:	0f b6       	in	r0, 0x3f	; 63
 162:	0f 92       	push	r0
 164:	11 24       	eor	r1, r1
 166:	8f 93       	push	r24
	switch_=2;
 168:	82 e0       	ldi	r24, 0x02	; 2
 16a:	80 93 1a 01 	sts	0x011A, r24	; 0x80011a <switch_>
}
 16e:	8f 91       	pop	r24
 170:	0f 90       	pop	r0
 172:	0f be       	out	0x3f, r0	; 63
 174:	0f 90       	pop	r0
 176:	1f 90       	pop	r1
 178:	18 95       	reti

0000017a <__vector_3>:

ISR(INT2_vect)
{
 17a:	1f 92       	push	r1
 17c:	0f 92       	push	r0
 17e:	0f b6       	in	r0, 0x3f	; 63
 180:	0f 92       	push	r0
 182:	11 24       	eor	r1, r1
 184:	8f 93       	push	r24
	switch_=3;
 186:	83 e0       	ldi	r24, 0x03	; 3
 188:	80 93 1a 01 	sts	0x011A, r24	; 0x80011a <switch_>
}
 18c:	8f 91       	pop	r24
 18e:	0f 90       	pop	r0
 190:	0f be       	out	0x3f, r0	; 63
 192:	0f 90       	pop	r0
 194:	1f 90       	pop	r1
 196:	18 95       	reti

00000198 <__vector_4>:

ISR(INT3_vect)
{
 198:	1f 92       	push	r1
 19a:	0f 92       	push	r0
 19c:	0f b6       	in	r0, 0x3f	; 63
 19e:	0f 92       	push	r0
 1a0:	11 24       	eor	r1, r1
 1a2:	8f 93       	push	r24
	switch_=4;
 1a4:	84 e0       	ldi	r24, 0x04	; 4
 1a6:	80 93 1a 01 	sts	0x011A, r24	; 0x80011a <switch_>
}
 1aa:	8f 91       	pop	r24
 1ac:	0f 90       	pop	r0
 1ae:	0f be       	out	0x3f, r0	; 63
 1b0:	0f 90       	pop	r0
 1b2:	1f 90       	pop	r1
 1b4:	18 95       	reti

000001b6 <_Z9mudar_rotv>:
	digital();
}
/*In this function the direction of the motor will be checked and changed */
void mudar_rot(void)
{
	if (PORTB & (1<<5))
 1b6:	c5 9b       	sbis	0x18, 5	; 24
 1b8:	10 c0       	rjmp	.+32     	; 0x1da <_Z9mudar_rotv+0x24>
	{
		PORTB |=(1<<5)|(1<<6);
 1ba:	88 b3       	in	r24, 0x18	; 24
 1bc:	80 66       	ori	r24, 0x60	; 96
 1be:	88 bb       	out	0x18, r24	; 24
	#else
		//round up by default
		__ticks_dc = (uint32_t)(ceil(fabs(__tmp)));
	#endif

	__builtin_avr_delay_cycles(__ticks_dc);
 1c0:	2f ef       	ldi	r18, 0xFF	; 255
 1c2:	89 e6       	ldi	r24, 0x69	; 105
 1c4:	98 e1       	ldi	r25, 0x18	; 24
 1c6:	21 50       	subi	r18, 0x01	; 1
 1c8:	80 40       	sbci	r24, 0x00	; 0
 1ca:	90 40       	sbci	r25, 0x00	; 0
 1cc:	e1 f7       	brne	.-8      	; 0x1c6 <_Z9mudar_rotv+0x10>
 1ce:	00 c0       	rjmp	.+0      	; 0x1d0 <_Z9mudar_rotv+0x1a>
 1d0:	00 00       	nop
		_delay_ms(500);
		PORTB &=~(1<<5);
 1d2:	88 b3       	in	r24, 0x18	; 24
 1d4:	8f 7d       	andi	r24, 0xDF	; 223
 1d6:	88 bb       	out	0x18, r24	; 24
 1d8:	08 95       	ret
	}else
	{
		PORTB |=(1<<5)|(1<<6);
 1da:	88 b3       	in	r24, 0x18	; 24
 1dc:	80 66       	ori	r24, 0x60	; 96
 1de:	88 bb       	out	0x18, r24	; 24
 1e0:	2f ef       	ldi	r18, 0xFF	; 255
 1e2:	89 e6       	ldi	r24, 0x69	; 105
 1e4:	98 e1       	ldi	r25, 0x18	; 24
 1e6:	21 50       	subi	r18, 0x01	; 1
 1e8:	80 40       	sbci	r24, 0x00	; 0
 1ea:	90 40       	sbci	r25, 0x00	; 0
 1ec:	e1 f7       	brne	.-8      	; 0x1e6 <_Z9mudar_rotv+0x30>
 1ee:	00 c0       	rjmp	.+0      	; 0x1f0 <_Z9mudar_rotv+0x3a>
 1f0:	00 00       	nop
		_delay_ms(500);
		PORTB &=~(1<<6);
 1f2:	88 b3       	in	r24, 0x18	; 24
 1f4:	8f 7b       	andi	r24, 0xBF	; 191
 1f6:	88 bb       	out	0x18, r24	; 24
 1f8:	08 95       	ret

000001fa <_Z7digitalv>:
}

int digital(void){
    while (1)
	{
		screen0= 0b10100001;
 1fa:	81 ea       	ldi	r24, 0xA1	; 161
 1fc:	80 93 14 01 	sts	0x0114, r24	; 0x800114 <screen0>
		if((PIND | 0b11011111) == 0b11011111){
 200:	80 b3       	in	r24, 0x10	; 16
 202:	8f 6d       	ori	r24, 0xDF	; 223
 204:	8f 3d       	cpi	r24, 0xDF	; 223
 206:	09 f4       	brne	.+2      	; 0x20a <_Z7digitalv+0x10>
		analogico();
 208:	69 d0       	rcall	.+210    	; 0x2dc <_Z9analogicov>
		}
		switch(switch_)
 20a:	80 91 1a 01 	lds	r24, 0x011A	; 0x80011a <switch_>
 20e:	82 30       	cpi	r24, 0x02	; 2
 210:	d9 f0       	breq	.+54     	; 0x248 <_Z7digitalv+0x4e>
 212:	18 f4       	brcc	.+6      	; 0x21a <_Z7digitalv+0x20>
 214:	81 30       	cpi	r24, 0x01	; 1
 216:	39 f0       	breq	.+14     	; 0x226 <_Z7digitalv+0x2c>
 218:	54 c0       	rjmp	.+168    	; 0x2c2 <_Z7digitalv+0xc8>
 21a:	83 30       	cpi	r24, 0x03	; 3
 21c:	31 f1       	breq	.+76     	; 0x26a <_Z7digitalv+0x70>
 21e:	84 30       	cpi	r24, 0x04	; 4
 220:	09 f4       	brne	.+2      	; 0x224 <_Z7digitalv+0x2a>
 222:	46 c0       	rjmp	.+140    	; 0x2b0 <_Z7digitalv+0xb6>
 224:	4e c0       	rjmp	.+156    	; 0x2c2 <_Z7digitalv+0xc8>
		{
			/*Switch 1 will make the motor rotate at 25% of its nominal speed, and save the value "25" in variables
			 so it is displayed in the 7 segment display*/
			case 1:	
			screen3 = display[5];
 226:	82 e9       	ldi	r24, 0x92	; 146
 228:	80 93 15 01 	sts	0x0115, r24	; 0x800115 <screen3>
			screen2 = display[2];
 22c:	84 ea       	ldi	r24, 0xA4	; 164
 22e:	80 93 16 01 	sts	0x0116, r24	; 0x800116 <screen2>
			if(negative == 1)
 232:	80 91 18 01 	lds	r24, 0x0118	; 0x800118 <negative>
 236:	81 30       	cpi	r24, 0x01	; 1
 238:	19 f4       	brne	.+6      	; 0x240 <_Z7digitalv+0x46>
			{
				screen1 = display[10];
 23a:	8f eb       	ldi	r24, 0xBF	; 191
 23c:	80 93 17 01 	sts	0x0117, r24	; 0x800117 <screen1>
			}
			motor = 25;
 240:	89 e1       	ldi	r24, 0x19	; 25
 242:	80 93 13 01 	sts	0x0113, r24	; 0x800113 <motor>
			break;
 246:	3d c0       	rjmp	.+122    	; 0x2c2 <_Z7digitalv+0xc8>
			
			/*Switch 2 will make the motor rotate at 25% of its nominal speed, and save the value "25" in variables
			 so it is displayed in the 7 segment display*/
			case 2:	
			screen3 = display[0];
 248:	80 ec       	ldi	r24, 0xC0	; 192
 24a:	80 93 15 01 	sts	0x0115, r24	; 0x800115 <screen3>
			screen2 = display[7];
 24e:	88 ef       	ldi	r24, 0xF8	; 248
 250:	80 93 16 01 	sts	0x0116, r24	; 0x800116 <screen2>
			if(negative == 1)
 254:	80 91 18 01 	lds	r24, 0x0118	; 0x800118 <negative>
 258:	81 30       	cpi	r24, 0x01	; 1
 25a:	19 f4       	brne	.+6      	; 0x262 <_Z7digitalv+0x68>
			{
				screen1 = display[10];
 25c:	8f eb       	ldi	r24, 0xBF	; 191
 25e:	80 93 17 01 	sts	0x0117, r24	; 0x800117 <screen1>
			}
			motor = 70;
 262:	86 e4       	ldi	r24, 0x46	; 70
 264:	80 93 13 01 	sts	0x0113, r24	; 0x800113 <motor>
			break;
 268:	2c c0       	rjmp	.+88     	; 0x2c2 <_Z7digitalv+0xc8>
			
			/*Switch 3 will check what value is being currently displayed ( "-" or " " ) and call the function that will make the motor
			switch the direction of its rotation*/
			case 3:	
			if(flag==0) break;
 26a:	80 91 19 01 	lds	r24, 0x0119	; 0x800119 <flag>
 26e:	88 23       	and	r24, r24
 270:	41 f1       	breq	.+80     	; 0x2c2 <_Z7digitalv+0xc8>
			flag = 0;
 272:	10 92 19 01 	sts	0x0119, r1	; 0x800119 <flag>
			if(screen1 == display[11] && negative == 0)
 276:	80 91 17 01 	lds	r24, 0x0117	; 0x800117 <screen1>
 27a:	8f 3f       	cpi	r24, 0xFF	; 255
 27c:	31 f4       	brne	.+12     	; 0x28a <_Z7digitalv+0x90>
 27e:	80 91 18 01 	lds	r24, 0x0118	; 0x800118 <negative>
 282:	88 23       	and	r24, r24
 284:	21 f0       	breq	.+8      	; 0x28e <_Z7digitalv+0x94>
 286:	80 e0       	ldi	r24, 0x00	; 0
 288:	03 c0       	rjmp	.+6      	; 0x290 <_Z7digitalv+0x96>
 28a:	80 e0       	ldi	r24, 0x00	; 0
 28c:	01 c0       	rjmp	.+2      	; 0x290 <_Z7digitalv+0x96>
 28e:	81 e0       	ldi	r24, 0x01	; 1
 290:	88 23       	and	r24, r24
 292:	39 f0       	breq	.+14     	; 0x2a2 <_Z7digitalv+0xa8>
			{
				screen1 = display[10];
 294:	8f eb       	ldi	r24, 0xBF	; 191
 296:	80 93 17 01 	sts	0x0117, r24	; 0x800117 <screen1>
				negative = 1;
 29a:	81 e0       	ldi	r24, 0x01	; 1
 29c:	80 93 18 01 	sts	0x0118, r24	; 0x800118 <negative>
 2a0:	05 c0       	rjmp	.+10     	; 0x2ac <_Z7digitalv+0xb2>
			}else
			{
				screen1 = display[11];
 2a2:	8f ef       	ldi	r24, 0xFF	; 255
 2a4:	80 93 17 01 	sts	0x0117, r24	; 0x800117 <screen1>
				negative = 0;
 2a8:	10 92 18 01 	sts	0x0118, r1	; 0x800118 <negative>
			}
			mudar_rot();
 2ac:	84 df       	rcall	.-248    	; 0x1b6 <_Z9mudar_rotv>
			break;
 2ae:	09 c0       	rjmp	.+18     	; 0x2c2 <_Z7digitalv+0xc8>
			/*Switch 4 will make the motor stop and turn of the display*/
			case 4:	
			screen3 = display[11];
 2b0:	8f ef       	ldi	r24, 0xFF	; 255
 2b2:	80 93 15 01 	sts	0x0115, r24	; 0x800115 <screen3>
			screen2 = display[11];
 2b6:	80 93 16 01 	sts	0x0116, r24	; 0x800116 <screen2>
			screen1 = display[11];
 2ba:	80 93 17 01 	sts	0x0117, r24	; 0x800117 <screen1>
			motor = 0;
 2be:	10 92 13 01 	sts	0x0113, r1	; 0x800113 <motor>
			break;
			}
			/*Resets the value of the switch*/
			switch_=0;
 2c2:	10 92 1a 01 	sts	0x011A, r1	; 0x80011a <switch_>
			/*Changes the motor speed*/
			OCR2 = DC(motor);
 2c6:	80 91 13 01 	lds	r24, 0x0113	; 0x800113 <motor>
 2ca:	2f ef       	ldi	r18, 0xFF	; 255
 2cc:	82 9f       	mul	r24, r18
 2ce:	c0 01       	movw	r24, r0
 2d0:	11 24       	eor	r1, r1
 2d2:	64 e6       	ldi	r22, 0x64	; 100
 2d4:	70 e0       	ldi	r23, 0x00	; 0
 2d6:	f1 d0       	rcall	.+482    	; 0x4ba <__divmodhi4>
 2d8:	63 bd       	out	0x23, r22	; 35
{
	switch_=4;
}

int digital(void){
    while (1)
 2da:	8f cf       	rjmp	.-226    	; 0x1fa <_Z7digitalv>

000002dc <_Z9analogicov>:
	lerL = ADCL;
	lerH = ADCH;
}*/
int analogico(void){
    while(1){
        screen0 = 0b11000010;
 2dc:	82 ec       	ldi	r24, 0xC2	; 194
 2de:	80 93 14 01 	sts	0x0114, r24	; 0x800114 <screen0>
		if((PIND | 0b11101111) == 0b11101111){
 2e2:	80 b3       	in	r24, 0x10	; 16
 2e4:	8f 6e       	ori	r24, 0xEF	; 239
 2e6:	8f 3e       	cpi	r24, 0xEF	; 239
 2e8:	09 f4       	brne	.+2      	; 0x2ec <_Z9analogicov+0x10>
		digital();
 2ea:	87 df       	rcall	.-242    	; 0x1fa <_Z7digitalv>
		}
		ler_AD();
 2ec:	ed de       	rcall	.-550    	; 0xc8 <ler_AD>
 2ee:	80 91 18 01 	lds	r24, 0x0118	; 0x800118 <negative>
		if(negative == 1) flag1 = 1;
 2f2:	81 30       	cpi	r24, 0x01	; 1
 2f4:	11 f4       	brne	.+4      	; 0x2fa <_Z9analogicov+0x1e>
 2f6:	80 93 12 01 	sts	0x0112, r24	; 0x800112 <flag1>
 2fa:	80 91 1c 01 	lds	r24, 0x011C	; 0x80011c <lerH>
		AD = (lerH << 8) + lerL;
 2fe:	90 e0       	ldi	r25, 0x00	; 0
 300:	98 2f       	mov	r25, r24
 302:	88 27       	eor	r24, r24
 304:	20 91 1b 01 	lds	r18, 0x011B	; 0x80011b <lerL>
 308:	82 0f       	add	r24, r18
 30a:	91 1d       	adc	r25, r1
 30c:	90 93 11 01 	sts	0x0111, r25	; 0x800111 <AD+0x1>
 310:	80 93 10 01 	sts	0x0110, r24	; 0x800110 <AD>
 314:	90 93 0f 01 	sts	0x010F, r25	; 0x80010f <__data_end+0x1>
	//	AD = convert(AD);
		temp = AD;
 318:	80 93 0e 01 	sts	0x010E, r24	; 0x80010e <__data_end>
 31c:	00 97       	sbiw	r24, 0x00	; 0
		if(AD == 0 || AD == 1024){
 31e:	21 f0       	breq	.+8      	; 0x328 <_Z9analogicov+0x4c>
 320:	81 15       	cp	r24, r1
 322:	24 e0       	ldi	r18, 0x04	; 4
 324:	92 07       	cpc	r25, r18
 326:	49 f4       	brne	.+18     	; 0x33a <_Z9analogicov+0x5e>
 328:	80 e7       	ldi	r24, 0x70	; 112
			screen3 = display[12];
 32a:	80 93 15 01 	sts	0x0115, r24	; 0x800115 <screen3>
 32e:	80 93 16 01 	sts	0x0116, r24	; 0x800116 <screen2>
			screen2 = display[12];
 332:	84 e6       	ldi	r24, 0x64	; 100
			motor=100;
 334:	80 93 13 01 	sts	0x0113, r24	; 0x800113 <motor>
 338:	5f c0       	rjmp	.+190    	; 0x3f8 <_Z9analogicov+0x11c>
 33a:	82 3e       	cpi	r24, 0xE2	; 226
		}
		else{
			if(AD<=481){
 33c:	21 e0       	ldi	r18, 0x01	; 1
 33e:	92 07       	cpc	r25, r18
 340:	d0 f4       	brcc	.+52     	; 0x376 <_Z9analogicov+0x9a>
 342:	21 ee       	ldi	r18, 0xE1	; 225
				motor = ((481-temp)/481)*100;
 344:	31 e0       	ldi	r19, 0x01	; 1
 346:	28 1b       	sub	r18, r24
 348:	39 0b       	sbc	r19, r25
 34a:	a1 e2       	ldi	r26, 0x21	; 33
 34c:	b2 e0       	ldi	r27, 0x02	; 2
 34e:	c8 d0       	rcall	.+400    	; 0x4e0 <__umulhisi3>
 350:	96 95       	lsr	r25
 352:	87 95       	ror	r24
 354:	96 95       	lsr	r25
 356:	87 95       	ror	r24
 358:	94 e6       	ldi	r25, 0x64	; 100
 35a:	89 9f       	mul	r24, r25
 35c:	80 2d       	mov	r24, r0
 35e:	11 24       	eor	r1, r1
 360:	80 93 13 01 	sts	0x0113, r24	; 0x800113 <motor>
 364:	80 91 12 01 	lds	r24, 0x0112	; 0x800112 <flag1>
				if(flag1 == 0)
 368:	81 11       	cpse	r24, r1
 36a:	01 c0       	rjmp	.+2      	; 0x36e <_Z9analogicov+0x92>
				{
					mudar_rot();
 36c:	24 df       	rcall	.-440    	; 0x1b6 <_Z9mudar_rotv>
 36e:	81 e0       	ldi	r24, 0x01	; 1
				}
				flag1 = 1;
 370:	80 93 12 01 	sts	0x0112, r24	; 0x800112 <flag1>
 374:	1e c0       	rjmp	.+60     	; 0x3b2 <_Z9analogicov+0xd6>
 376:	8f 31       	cpi	r24, 0x1F	; 31
			}
			else{
				if(AD<543)
 378:	22 e0       	ldi	r18, 0x02	; 2
 37a:	92 07       	cpc	r25, r18
 37c:	18 f4       	brcc	.+6      	; 0x384 <_Z9analogicov+0xa8>
 37e:	10 92 13 01 	sts	0x0113, r1	; 0x800113 <motor>
				{
					motor = 0;
 382:	17 c0       	rjmp	.+46     	; 0x3b2 <_Z9analogicov+0xd6>
 384:	9c 01       	movw	r18, r24
				}
				else{
					motor = ((temp-542)/481)*100;
 386:	2e 51       	subi	r18, 0x1E	; 30
 388:	32 40       	sbci	r19, 0x02	; 2
 38a:	a1 e2       	ldi	r26, 0x21	; 33
 38c:	b2 e0       	ldi	r27, 0x02	; 2
 38e:	a8 d0       	rcall	.+336    	; 0x4e0 <__umulhisi3>
 390:	96 95       	lsr	r25
 392:	87 95       	ror	r24
 394:	96 95       	lsr	r25
 396:	87 95       	ror	r24
 398:	94 e6       	ldi	r25, 0x64	; 100
 39a:	89 9f       	mul	r24, r25
 39c:	80 2d       	mov	r24, r0
 39e:	11 24       	eor	r1, r1
 3a0:	80 93 13 01 	sts	0x0113, r24	; 0x800113 <motor>
 3a4:	80 91 12 01 	lds	r24, 0x0112	; 0x800112 <flag1>
					if(flag1 == 1)
 3a8:	81 30       	cpi	r24, 0x01	; 1
 3aa:	09 f4       	brne	.+2      	; 0x3ae <_Z9analogicov+0xd2>
 3ac:	04 df       	rcall	.-504    	; 0x1b6 <_Z9mudar_rotv>
					{
						mudar_rot();
 3ae:	10 92 12 01 	sts	0x0112, r1	; 0x800112 <flag1>
					}
					flag1 = 0;
 3b2:	a0 91 13 01 	lds	r26, 0x0113	; 0x800113 <motor>
				}
			}
			screen3=display[motor%10];
 3b6:	ed ec       	ldi	r30, 0xCD	; 205
 3b8:	ae 9f       	mul	r26, r30
 3ba:	81 2d       	mov	r24, r1
 3bc:	11 24       	eor	r1, r1
 3be:	86 95       	lsr	r24
 3c0:	86 95       	lsr	r24
 3c2:	86 95       	lsr	r24
 3c4:	88 0f       	add	r24, r24
 3c6:	98 2f       	mov	r25, r24
 3c8:	99 0f       	add	r25, r25
 3ca:	99 0f       	add	r25, r25
 3cc:	89 0f       	add	r24, r25
 3ce:	a8 1b       	sub	r26, r24
 3d0:	b0 e0       	ldi	r27, 0x00	; 0
 3d2:	a0 50       	subi	r26, 0x00	; 0
 3d4:	bf 4f       	sbci	r27, 0xFF	; 255
 3d6:	8c 91       	ld	r24, X
 3d8:	80 93 15 01 	sts	0x0115, r24	; 0x800115 <screen3>
 3dc:	80 91 13 01 	lds	r24, 0x0113	; 0x800113 <motor>
			screen2=display[motor/10];
 3e0:	8e 9f       	mul	r24, r30
 3e2:	e1 2d       	mov	r30, r1
 3e4:	11 24       	eor	r1, r1
 3e6:	e6 95       	lsr	r30
 3e8:	e6 95       	lsr	r30
 3ea:	e6 95       	lsr	r30
 3ec:	f0 e0       	ldi	r31, 0x00	; 0
 3ee:	e0 50       	subi	r30, 0x00	; 0
 3f0:	ff 4f       	sbci	r31, 0xFF	; 255
 3f2:	80 81       	ld	r24, Z
 3f4:	80 93 16 01 	sts	0x0116, r24	; 0x800116 <screen2>
 3f8:	80 91 13 01 	lds	r24, 0x0113	; 0x800113 <motor>
		}
		OCR2 = DC(motor);
 3fc:	2f ef       	ldi	r18, 0xFF	; 255
 3fe:	82 9f       	mul	r24, r18
 400:	c0 01       	movw	r24, r0
 402:	11 24       	eor	r1, r1
 404:	64 e6       	ldi	r22, 0x64	; 100
 406:	70 e0       	ldi	r23, 0x00	; 0
 408:	58 d0       	rcall	.+176    	; 0x4ba <__divmodhi4>
 40a:	63 bd       	out	0x23, r22	; 35
 40c:	67 cf       	rjmp	.-306    	; 0x2dc <_Z9analogicov>

0000040e <main>:
 40e:	71 de       	rcall	.-798    	; 0xf2 <_Z4inicv>
	
	lerL = ADCL;
	lerH = ADCH;
}*/
int analogico(void){
    while(1){
 410:	f4 de       	rcall	.-536    	; 0x1fa <_Z7digitalv>

00000412 <_Z8display_v>:
}
/*This is our main function where there is a case/switch that will operate acording to the switches that are pressed*/
int main(void)
{
	inic();
	digital();
 412:	80 ec       	ldi	r24, 0xC0	; 192
}

/*In this function we update the display with the values of the variables given from the above functions*/
void display_(void)
{
	PORTD = 0b11000000;
 414:	82 bb       	out	0x12, r24	; 18
	PORTC = screen3;
 416:	80 91 15 01 	lds	r24, 0x0115	; 0x800115 <screen3>
 41a:	85 bb       	out	0x15, r24	; 21
 41c:	8f e9       	ldi	r24, 0x9F	; 159
 41e:	9f e0       	ldi	r25, 0x0F	; 15
 420:	01 97       	sbiw	r24, 0x01	; 1
 422:	f1 f7       	brne	.-4      	; 0x420 <_Z8display_v+0xe>
 424:	00 c0       	rjmp	.+0      	; 0x426 <_Z8display_v+0x14>
 426:	00 00       	nop
	_delay_ms(1);
	PORTD = 0b10000000;
 428:	80 e8       	ldi	r24, 0x80	; 128
 42a:	82 bb       	out	0x12, r24	; 18
	PORTC = screen2;
 42c:	80 91 16 01 	lds	r24, 0x0116	; 0x800116 <screen2>
 430:	85 bb       	out	0x15, r24	; 21
 432:	8f e9       	ldi	r24, 0x9F	; 159
 434:	9f e0       	ldi	r25, 0x0F	; 15
 436:	01 97       	sbiw	r24, 0x01	; 1
 438:	f1 f7       	brne	.-4      	; 0x436 <_Z8display_v+0x24>
 43a:	00 c0       	rjmp	.+0      	; 0x43c <_Z8display_v+0x2a>
 43c:	00 00       	nop
	_delay_ms(1);
	PORTD = 0b01000000;
 43e:	80 e4       	ldi	r24, 0x40	; 64
 440:	82 bb       	out	0x12, r24	; 18
	/*This "if" condition is used to make sure the "-" sign wont appear when the motor is off*/
	if(motor!=0){
 442:	80 91 13 01 	lds	r24, 0x0113	; 0x800113 <motor>
 446:	88 23       	and	r24, r24
 448:	49 f0       	breq	.+18     	; 0x45c <_Z8display_v+0x4a>
	PORTC = screen1;
 44a:	80 91 17 01 	lds	r24, 0x0117	; 0x800117 <screen1>
 44e:	85 bb       	out	0x15, r24	; 21
 450:	8f e9       	ldi	r24, 0x9F	; 159
 452:	9f e0       	ldi	r25, 0x0F	; 15
 454:	01 97       	sbiw	r24, 0x01	; 1
 456:	f1 f7       	brne	.-4      	; 0x454 <_Z8display_v+0x42>
 458:	00 c0       	rjmp	.+0      	; 0x45a <_Z8display_v+0x48>
 45a:	00 00       	nop
	_delay_ms(1);}
	PORTD = 0b00000000;
 45c:	12 ba       	out	0x12, r1	; 18
	PORTC = screen0;
 45e:	80 91 14 01 	lds	r24, 0x0114	; 0x800114 <screen0>
 462:	85 bb       	out	0x15, r24	; 21
 464:	08 95       	ret

00000466 <__vector_15>:
//int convert(unsigned int n);
extern "C" int ler_AD(void);

/*This is the interrupt functions starting with the Timer/Counter 0 and followed by the switches*/
ISR(TIMER0_COMP_vect)
{
 466:	1f 92       	push	r1
 468:	0f 92       	push	r0
 46a:	0f b6       	in	r0, 0x3f	; 63
 46c:	0f 92       	push	r0
 46e:	11 24       	eor	r1, r1
 470:	0b b6       	in	r0, 0x3b	; 59
 472:	0f 92       	push	r0
 474:	2f 93       	push	r18
 476:	3f 93       	push	r19
 478:	4f 93       	push	r20
 47a:	5f 93       	push	r21
 47c:	6f 93       	push	r22
 47e:	7f 93       	push	r23
 480:	8f 93       	push	r24
 482:	9f 93       	push	r25
 484:	af 93       	push	r26
 486:	bf 93       	push	r27
 488:	ef 93       	push	r30
 48a:	ff 93       	push	r31
	display_();
 48c:	c2 df       	rcall	.-124    	; 0x412 <_Z8display_v>
	flag = 1;
 48e:	81 e0       	ldi	r24, 0x01	; 1
 490:	80 93 19 01 	sts	0x0119, r24	; 0x800119 <flag>
}
 494:	ff 91       	pop	r31
 496:	ef 91       	pop	r30
 498:	bf 91       	pop	r27
 49a:	af 91       	pop	r26
 49c:	9f 91       	pop	r25
 49e:	8f 91       	pop	r24
 4a0:	7f 91       	pop	r23
 4a2:	6f 91       	pop	r22
 4a4:	5f 91       	pop	r21
 4a6:	4f 91       	pop	r20
 4a8:	3f 91       	pop	r19
 4aa:	2f 91       	pop	r18
 4ac:	0f 90       	pop	r0
 4ae:	0b be       	out	0x3b, r0	; 59
 4b0:	0f 90       	pop	r0
 4b2:	0f be       	out	0x3f, r0	; 63
 4b4:	0f 90       	pop	r0
 4b6:	1f 90       	pop	r1
 4b8:	18 95       	reti

000004ba <__divmodhi4>:
 4ba:	97 fb       	bst	r25, 7
 4bc:	07 2e       	mov	r0, r23
 4be:	16 f4       	brtc	.+4      	; 0x4c4 <__divmodhi4+0xa>
 4c0:	00 94       	com	r0
 4c2:	06 d0       	rcall	.+12     	; 0x4d0 <__divmodhi4_neg1>
 4c4:	77 fd       	sbrc	r23, 7
 4c6:	08 d0       	rcall	.+16     	; 0x4d8 <__divmodhi4_neg2>
 4c8:	1a d0       	rcall	.+52     	; 0x4fe <__udivmodhi4>
 4ca:	07 fc       	sbrc	r0, 7
 4cc:	05 d0       	rcall	.+10     	; 0x4d8 <__divmodhi4_neg2>
 4ce:	3e f4       	brtc	.+14     	; 0x4de <__divmodhi4_exit>

000004d0 <__divmodhi4_neg1>:
 4d0:	90 95       	com	r25
 4d2:	81 95       	neg	r24
 4d4:	9f 4f       	sbci	r25, 0xFF	; 255
 4d6:	08 95       	ret

000004d8 <__divmodhi4_neg2>:
 4d8:	70 95       	com	r23
 4da:	61 95       	neg	r22
 4dc:	7f 4f       	sbci	r23, 0xFF	; 255

000004de <__divmodhi4_exit>:
 4de:	08 95       	ret

000004e0 <__umulhisi3>:
 4e0:	a2 9f       	mul	r26, r18
 4e2:	b0 01       	movw	r22, r0
 4e4:	b3 9f       	mul	r27, r19
 4e6:	c0 01       	movw	r24, r0
 4e8:	a3 9f       	mul	r26, r19
 4ea:	70 0d       	add	r23, r0
 4ec:	81 1d       	adc	r24, r1
 4ee:	11 24       	eor	r1, r1
 4f0:	91 1d       	adc	r25, r1
 4f2:	b2 9f       	mul	r27, r18
 4f4:	70 0d       	add	r23, r0
 4f6:	81 1d       	adc	r24, r1
 4f8:	11 24       	eor	r1, r1
 4fa:	91 1d       	adc	r25, r1
 4fc:	08 95       	ret

000004fe <__udivmodhi4>:
 4fe:	aa 1b       	sub	r26, r26
 500:	bb 1b       	sub	r27, r27
 502:	51 e1       	ldi	r21, 0x11	; 17
 504:	07 c0       	rjmp	.+14     	; 0x514 <__udivmodhi4_ep>

00000506 <__udivmodhi4_loop>:
 506:	aa 1f       	adc	r26, r26
 508:	bb 1f       	adc	r27, r27
 50a:	a6 17       	cp	r26, r22
 50c:	b7 07       	cpc	r27, r23
 50e:	10 f0       	brcs	.+4      	; 0x514 <__udivmodhi4_ep>
 510:	a6 1b       	sub	r26, r22
 512:	b7 0b       	sbc	r27, r23

00000514 <__udivmodhi4_ep>:
 514:	88 1f       	adc	r24, r24
 516:	99 1f       	adc	r25, r25
 518:	5a 95       	dec	r21
 51a:	a9 f7       	brne	.-22     	; 0x506 <__udivmodhi4_loop>
 51c:	80 95       	com	r24
 51e:	90 95       	com	r25
 520:	bc 01       	movw	r22, r24
 522:	cd 01       	movw	r24, r26
 524:	08 95       	ret

00000526 <_exit>:
 526:	f8 94       	cli

00000528 <__stop_program>:
 528:	ff cf       	rjmp	.-2      	; 0x528 <__stop_program>
