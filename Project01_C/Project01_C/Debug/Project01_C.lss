
Project01_C.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .data         00000000  00800100  00800100  000003d4  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  1 .text         00000360  00000000  00000000  00000074  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .bss          00000006  00800100  00800100  000003d4  2**0
                  ALLOC
  3 .comment      00000030  00000000  00000000  000003d4  2**0
                  CONTENTS, READONLY
  4 .note.gnu.avr.deviceinfo 0000003c  00000000  00000000  00000404  2**2
                  CONTENTS, READONLY
  5 .debug_aranges 00000060  00000000  00000000  00000440  2**0
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_info   00000aeb  00000000  00000000  000004a0  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_abbrev 00000887  00000000  00000000  00000f8b  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_line   000004d0  00000000  00000000  00001812  2**0
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_frame  0000012c  00000000  00000000  00001ce4  2**2
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_str    0000049c  00000000  00000000  00001e10  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_loc    0000031d  00000000  00000000  000022ac  2**0
                  CONTENTS, READONLY, DEBUGGING
 12 .debug_ranges 00000050  00000000  00000000  000025c9  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
   0:	45 c0       	rjmp	.+138    	; 0x8c <__ctors_end>
   2:	00 00       	nop
   4:	82 c0       	rjmp	.+260    	; 0x10a <__vector_1>
   6:	00 00       	nop
   8:	8f c0       	rjmp	.+286    	; 0x128 <__vector_2>
   a:	00 00       	nop
   c:	9c c0       	rjmp	.+312    	; 0x146 <__vector_3>
   e:	00 00       	nop
  10:	a9 c0       	rjmp	.+338    	; 0x164 <__vector_4>
  12:	00 00       	nop
  14:	58 c0       	rjmp	.+176    	; 0xc6 <__bad_interrupt>
  16:	00 00       	nop
  18:	56 c0       	rjmp	.+172    	; 0xc6 <__bad_interrupt>
  1a:	00 00       	nop
  1c:	54 c0       	rjmp	.+168    	; 0xc6 <__bad_interrupt>
  1e:	00 00       	nop
  20:	52 c0       	rjmp	.+164    	; 0xc6 <__bad_interrupt>
  22:	00 00       	nop
  24:	50 c0       	rjmp	.+160    	; 0xc6 <__bad_interrupt>
  26:	00 00       	nop
  28:	4e c0       	rjmp	.+156    	; 0xc6 <__bad_interrupt>
  2a:	00 00       	nop
  2c:	4c c0       	rjmp	.+152    	; 0xc6 <__bad_interrupt>
  2e:	00 00       	nop
  30:	4a c0       	rjmp	.+148    	; 0xc6 <__bad_interrupt>
  32:	00 00       	nop
  34:	48 c0       	rjmp	.+144    	; 0xc6 <__bad_interrupt>
  36:	00 00       	nop
  38:	46 c0       	rjmp	.+140    	; 0xc6 <__bad_interrupt>
  3a:	00 00       	nop
  3c:	3e c1       	rjmp	.+636    	; 0x2ba <__vector_15>
  3e:	00 00       	nop
  40:	42 c0       	rjmp	.+132    	; 0xc6 <__bad_interrupt>
  42:	00 00       	nop
  44:	40 c0       	rjmp	.+128    	; 0xc6 <__bad_interrupt>
  46:	00 00       	nop
  48:	3e c0       	rjmp	.+124    	; 0xc6 <__bad_interrupt>
  4a:	00 00       	nop
  4c:	3c c0       	rjmp	.+120    	; 0xc6 <__bad_interrupt>
  4e:	00 00       	nop
  50:	3a c0       	rjmp	.+116    	; 0xc6 <__bad_interrupt>
  52:	00 00       	nop
  54:	38 c0       	rjmp	.+112    	; 0xc6 <__bad_interrupt>
  56:	00 00       	nop
  58:	36 c0       	rjmp	.+108    	; 0xc6 <__bad_interrupt>
  5a:	00 00       	nop
  5c:	34 c0       	rjmp	.+104    	; 0xc6 <__bad_interrupt>
  5e:	00 00       	nop
  60:	32 c0       	rjmp	.+100    	; 0xc6 <__bad_interrupt>
  62:	00 00       	nop
  64:	30 c0       	rjmp	.+96     	; 0xc6 <__bad_interrupt>
  66:	00 00       	nop
  68:	2e c0       	rjmp	.+92     	; 0xc6 <__bad_interrupt>
  6a:	00 00       	nop
  6c:	2c c0       	rjmp	.+88     	; 0xc6 <__bad_interrupt>
  6e:	00 00       	nop
  70:	2a c0       	rjmp	.+84     	; 0xc6 <__bad_interrupt>
  72:	00 00       	nop
  74:	28 c0       	rjmp	.+80     	; 0xc6 <__bad_interrupt>
  76:	00 00       	nop
  78:	26 c0       	rjmp	.+76     	; 0xc6 <__bad_interrupt>
  7a:	00 00       	nop
  7c:	24 c0       	rjmp	.+72     	; 0xc6 <__bad_interrupt>
  7e:	00 00       	nop
  80:	22 c0       	rjmp	.+68     	; 0xc6 <__bad_interrupt>
  82:	00 00       	nop
  84:	20 c0       	rjmp	.+64     	; 0xc6 <__bad_interrupt>
  86:	00 00       	nop
  88:	1e c0       	rjmp	.+60     	; 0xc6 <__bad_interrupt>
	...

0000008c <__ctors_end>:
  8c:	11 24       	eor	r1, r1
  8e:	1f be       	out	0x3f, r1	; 63
  90:	cf ef       	ldi	r28, 0xFF	; 255
  92:	d0 e1       	ldi	r29, 0x10	; 16
  94:	de bf       	out	0x3e, r29	; 62
  96:	cd bf       	out	0x3d, r28	; 61

00000098 <__do_copy_data>:
  98:	11 e0       	ldi	r17, 0x01	; 1
  9a:	a0 e0       	ldi	r26, 0x00	; 0
  9c:	b1 e0       	ldi	r27, 0x01	; 1
  9e:	e0 e6       	ldi	r30, 0x60	; 96
  a0:	f3 e0       	ldi	r31, 0x03	; 3
  a2:	00 e0       	ldi	r16, 0x00	; 0
  a4:	0b bf       	out	0x3b, r16	; 59
  a6:	02 c0       	rjmp	.+4      	; 0xac <__do_copy_data+0x14>
  a8:	07 90       	elpm	r0, Z+
  aa:	0d 92       	st	X+, r0
  ac:	a0 30       	cpi	r26, 0x00	; 0
  ae:	b1 07       	cpc	r27, r17
  b0:	d9 f7       	brne	.-10     	; 0xa8 <__do_copy_data+0x10>

000000b2 <__do_clear_bss>:
  b2:	21 e0       	ldi	r18, 0x01	; 1
  b4:	a0 e0       	ldi	r26, 0x00	; 0
  b6:	b1 e0       	ldi	r27, 0x01	; 1
  b8:	01 c0       	rjmp	.+2      	; 0xbc <.do_clear_bss_start>

000000ba <.do_clear_bss_loop>:
  ba:	1d 92       	st	X+, r1

000000bc <.do_clear_bss_start>:
  bc:	a6 30       	cpi	r26, 0x06	; 6
  be:	b2 07       	cpc	r27, r18
  c0:	e1 f7       	brne	.-8      	; 0xba <.do_clear_bss_loop>
  c2:	7d d0       	rcall	.+250    	; 0x1be <main>
  c4:	4b c1       	rjmp	.+662    	; 0x35c <_exit>

000000c6 <__bad_interrupt>:
  c6:	9c cf       	rjmp	.-200    	; 0x0 <__vectors>

000000c8 <inic>:


void inic(void)
{
	
	DDRD = 0b11000000;		// configura porta - switch_
  c8:	80 ec       	ldi	r24, 0xC0	; 192
  ca:	81 bb       	out	0x11, r24	; 17
	PORTD = 0b00111111;		// pinos 6,7 saídas, restantes entrada
  cc:	8f e3       	ldi	r24, 0x3F	; 63
  ce:	82 bb       	out	0x12, r24	; 18
	
	DDRC = 0b11111111;		// configura portc - displays
  d0:	8f ef       	ldi	r24, 0xFF	; 255
  d2:	84 bb       	out	0x14, r24	; 20
	PORTC = 0b11111111;		// todos os pinos saídas
  d4:	85 bb       	out	0x15, r24	; 21
	screen3 = display[11];
  d6:	80 93 05 01 	sts	0x0105, r24	; 0x800105 <screen3>
	screen2 = display[11];
  da:	80 93 02 01 	sts	0x0102, r24	; 0x800102 <screen2>
	screen1 = display[11];
  de:	80 93 00 01 	sts	0x0100, r24	; 0x800100 <__DATA_REGION_ORIGIN__>
	
	DDRB = 0b11100000;    // portb motor
  e2:	80 ee       	ldi	r24, 0xE0	; 224
  e4:	87 bb       	out	0x17, r24	; 23
	PORTB = 0b00100000;
  e6:	80 e2       	ldi	r24, 0x20	; 32
  e8:	88 bb       	out	0x18, r24	; 24
	
	//interrupção externa
	EICRA = 0b10101010;
  ea:	8a ea       	ldi	r24, 0xAA	; 170
  ec:	80 93 6a 00 	sts	0x006A, r24	; 0x80006a <__TEXT_REGION_LENGTH__+0x7e006a>
	EIMSK = 0b00001111;
  f0:	8f e0       	ldi	r24, 0x0F	; 15
  f2:	89 bf       	out	0x39, r24	; 57
	
	OCR0 = 77;              // configura TC0 @16MHz
  f4:	9d e4       	ldi	r25, 0x4D	; 77
  f6:	91 bf       	out	0x31, r25	; 49
	TCCR0 = 0b00001111;     // 5ms, prescaler 1024, CTC
  f8:	83 bf       	out	0x33, r24	; 51
	TIMSK |= 0b00000010;    // interrupção TC0
  fa:	87 b7       	in	r24, 0x37	; 55
  fc:	82 60       	ori	r24, 0x02	; 2
  fe:	87 bf       	out	0x37, r24	; 55
	
	OCR2 = DC(0);
 100:	13 bc       	out	0x23, r1	; 35
	TCCR2 = 0b01100011;		//  TC2 - prescaler 64, modo 1, phase correct
 102:	83 e6       	ldi	r24, 0x63	; 99
 104:	85 bd       	out	0x25, r24	; 37
	
	sei();           //ativa flag I do SREG
 106:	78 94       	sei
 108:	08 95       	ret

0000010a <__vector_1>:
	display_();
	flag = 1;
}

ISR(INT0_vect)  // switch_1
{
 10a:	1f 92       	push	r1
 10c:	0f 92       	push	r0
 10e:	0f b6       	in	r0, 0x3f	; 63
 110:	0f 92       	push	r0
 112:	11 24       	eor	r1, r1
 114:	8f 93       	push	r24
	switch_=1;
 116:	81 e0       	ldi	r24, 0x01	; 1
 118:	80 93 03 01 	sts	0x0103, r24	; 0x800103 <switch_>
}
 11c:	8f 91       	pop	r24
 11e:	0f 90       	pop	r0
 120:	0f be       	out	0x3f, r0	; 63
 122:	0f 90       	pop	r0
 124:	1f 90       	pop	r1
 126:	18 95       	reti

00000128 <__vector_2>:

ISR(INT1_vect)  // switch_2
{
 128:	1f 92       	push	r1
 12a:	0f 92       	push	r0
 12c:	0f b6       	in	r0, 0x3f	; 63
 12e:	0f 92       	push	r0
 130:	11 24       	eor	r1, r1
 132:	8f 93       	push	r24
	switch_=2;
 134:	82 e0       	ldi	r24, 0x02	; 2
 136:	80 93 03 01 	sts	0x0103, r24	; 0x800103 <switch_>
}
 13a:	8f 91       	pop	r24
 13c:	0f 90       	pop	r0
 13e:	0f be       	out	0x3f, r0	; 63
 140:	0f 90       	pop	r0
 142:	1f 90       	pop	r1
 144:	18 95       	reti

00000146 <__vector_3>:

ISR(INT2_vect)	// switch_3
{
 146:	1f 92       	push	r1
 148:	0f 92       	push	r0
 14a:	0f b6       	in	r0, 0x3f	; 63
 14c:	0f 92       	push	r0
 14e:	11 24       	eor	r1, r1
 150:	8f 93       	push	r24
	switch_=3;
 152:	83 e0       	ldi	r24, 0x03	; 3
 154:	80 93 03 01 	sts	0x0103, r24	; 0x800103 <switch_>
}
 158:	8f 91       	pop	r24
 15a:	0f 90       	pop	r0
 15c:	0f be       	out	0x3f, r0	; 63
 15e:	0f 90       	pop	r0
 160:	1f 90       	pop	r1
 162:	18 95       	reti

00000164 <__vector_4>:

ISR(INT3_vect)	// switch_4
{
 164:	1f 92       	push	r1
 166:	0f 92       	push	r0
 168:	0f b6       	in	r0, 0x3f	; 63
 16a:	0f 92       	push	r0
 16c:	11 24       	eor	r1, r1
 16e:	8f 93       	push	r24
	switch_=4;
 170:	84 e0       	ldi	r24, 0x04	; 4
 172:	80 93 03 01 	sts	0x0103, r24	; 0x800103 <switch_>
}
 176:	8f 91       	pop	r24
 178:	0f 90       	pop	r0
 17a:	0f be       	out	0x3f, r0	; 63
 17c:	0f 90       	pop	r0
 17e:	1f 90       	pop	r1
 180:	18 95       	reti

00000182 <mudar_rot>:
	}
}

void mudar_rot(void)
{
	if (PORTB & (1<<5))
 182:	c5 9b       	sbis	0x18, 5	; 24
 184:	0e c0       	rjmp	.+28     	; 0x1a2 <mudar_rot+0x20>
	{
		PORTB |=(1<<5)|(1<<6);
 186:	88 b3       	in	r24, 0x18	; 24
 188:	80 66       	ori	r24, 0x60	; 96
 18a:	88 bb       	out	0x18, r24	; 24
	#else
		//round up by default
		__ticks_dc = (uint32_t)(ceil(fabs(__tmp)));
	#endif

	__builtin_avr_delay_cycles(__ticks_dc);
 18c:	2f ef       	ldi	r18, 0xFF	; 255
 18e:	89 e6       	ldi	r24, 0x69	; 105
 190:	98 e1       	ldi	r25, 0x18	; 24
 192:	21 50       	subi	r18, 0x01	; 1
 194:	80 40       	sbci	r24, 0x00	; 0
 196:	90 40       	sbci	r25, 0x00	; 0
 198:	e1 f7       	brne	.-8      	; 0x192 <mudar_rot+0x10>
 19a:	00 c0       	rjmp	.+0      	; 0x19c <mudar_rot+0x1a>
 19c:	00 00       	nop
		_delay_ms(500);
		PORTB &=~(1<<5);
 19e:	c5 98       	cbi	0x18, 5	; 24
 1a0:	08 95       	ret
	}else
	{
		PORTB |=(1<<5)|(1<<6);
 1a2:	88 b3       	in	r24, 0x18	; 24
 1a4:	80 66       	ori	r24, 0x60	; 96
 1a6:	88 bb       	out	0x18, r24	; 24
 1a8:	2f ef       	ldi	r18, 0xFF	; 255
 1aa:	89 e6       	ldi	r24, 0x69	; 105
 1ac:	98 e1       	ldi	r25, 0x18	; 24
 1ae:	21 50       	subi	r18, 0x01	; 1
 1b0:	80 40       	sbci	r24, 0x00	; 0
 1b2:	90 40       	sbci	r25, 0x00	; 0
 1b4:	e1 f7       	brne	.-8      	; 0x1ae <mudar_rot+0x2c>
 1b6:	00 c0       	rjmp	.+0      	; 0x1b8 <mudar_rot+0x36>
 1b8:	00 00       	nop
		_delay_ms(500);
		PORTB &=~(1<<6);
 1ba:	c6 98       	cbi	0x18, 6	; 24
 1bc:	08 95       	ret

000001be <main>:


// rotina principal
int main(void)
{
	inic();
 1be:	84 df       	rcall	.-248    	; 0xc8 <inic>
			screen2 = display[2];
			motor = 25;
			break;
			
			case 2:				// switch_2 - 70% da velocidade nominal
			screen3 = display[0];
 1c0:	0f 2e       	mov	r0, r31
 1c2:	f0 ec       	ldi	r31, 0xC0	; 192
 1c4:	bf 2e       	mov	r11, r31
 1c6:	f0 2d       	mov	r31, r0
			screen2 = display[7];
 1c8:	0f 2e       	mov	r0, r31
 1ca:	f8 ef       	ldi	r31, 0xF8	; 248
 1cc:	cf 2e       	mov	r12, r31
 1ce:	f0 2d       	mov	r31, r0
			motor = 70;
 1d0:	0f 2e       	mov	r0, r31
 1d2:	f6 e4       	ldi	r31, 0x46	; 70
 1d4:	df 2e       	mov	r13, r31
 1d6:	f0 2d       	mov	r31, r0
			if(screen1 == display[11])
			{
				screen1 = display[10];
			}else
			{
				screen1 = display[11];
 1d8:	cf ef       	ldi	r28, 0xFF	; 255
			case 3:				// switch_3 - inverte o sentido de rotação
			if(flag==0) {break;}
			flag = 0;
			if(screen1 == display[11])
			{
				screen1 = display[10];
 1da:	0f 2e       	mov	r0, r31
 1dc:	ff eb       	ldi	r31, 0xBF	; 191
 1de:	af 2e       	mov	r10, r31
 1e0:	f0 2d       	mov	r31, r0
	while (1)
	{
		switch(switch_)
		{
			case 1:				// switch_1 - 25% da velocidade nominal
			screen3 = display[5];
 1e2:	0f 2e       	mov	r0, r31
 1e4:	f2 e9       	ldi	r31, 0x92	; 146
 1e6:	ef 2e       	mov	r14, r31
 1e8:	f0 2d       	mov	r31, r0
			screen2 = display[2];
 1ea:	0f 2e       	mov	r0, r31
 1ec:	f4 ea       	ldi	r31, 0xA4	; 164
 1ee:	ff 2e       	mov	r15, r31
 1f0:	f0 2d       	mov	r31, r0
			motor = 25;
 1f2:	d9 e1       	ldi	r29, 0x19	; 25
			screen1 = display[11];
			motor = 0;
			break;
		}
		switch_=0;
		OCR2 = DC(motor);
 1f4:	04 e6       	ldi	r16, 0x64	; 100
 1f6:	10 e0       	ldi	r17, 0x00	; 0
{
	inic();
	
	while (1)
	{
		switch(switch_)
 1f8:	80 91 03 01 	lds	r24, 0x0103	; 0x800103 <switch_>
 1fc:	82 30       	cpi	r24, 0x02	; 2
 1fe:	81 f0       	breq	.+32     	; 0x220 <main+0x62>
 200:	18 f4       	brcc	.+6      	; 0x208 <main+0x4a>
 202:	81 30       	cpi	r24, 0x01	; 1
 204:	31 f0       	breq	.+12     	; 0x212 <main+0x54>
 206:	2c c0       	rjmp	.+88     	; 0x260 <main+0xa2>
 208:	83 30       	cpi	r24, 0x03	; 3
 20a:	89 f0       	breq	.+34     	; 0x22e <main+0x70>
 20c:	84 30       	cpi	r24, 0x04	; 4
 20e:	01 f1       	breq	.+64     	; 0x250 <main+0x92>
 210:	27 c0       	rjmp	.+78     	; 0x260 <main+0xa2>
		{
			case 1:				// switch_1 - 25% da velocidade nominal
			screen3 = display[5];
 212:	e0 92 05 01 	sts	0x0105, r14	; 0x800105 <screen3>
			screen2 = display[2];
 216:	f0 92 02 01 	sts	0x0102, r15	; 0x800102 <screen2>
			motor = 25;
 21a:	d0 93 04 01 	sts	0x0104, r29	; 0x800104 <motor>
			break;
 21e:	20 c0       	rjmp	.+64     	; 0x260 <main+0xa2>
			
			case 2:				// switch_2 - 70% da velocidade nominal
			screen3 = display[0];
 220:	b0 92 05 01 	sts	0x0105, r11	; 0x800105 <screen3>
			screen2 = display[7];
 224:	c0 92 02 01 	sts	0x0102, r12	; 0x800102 <screen2>
			motor = 70;
 228:	d0 92 04 01 	sts	0x0104, r13	; 0x800104 <motor>
			break;
 22c:	19 c0       	rjmp	.+50     	; 0x260 <main+0xa2>
			
			
			case 3:				// switch_3 - inverte o sentido de rotação
			if(flag==0) {break;}
 22e:	80 91 01 01 	lds	r24, 0x0101	; 0x800101 <flag>
 232:	88 23       	and	r24, r24
 234:	a9 f0       	breq	.+42     	; 0x260 <main+0xa2>
			flag = 0;
 236:	10 92 01 01 	sts	0x0101, r1	; 0x800101 <flag>
			if(screen1 == display[11])
 23a:	80 91 00 01 	lds	r24, 0x0100	; 0x800100 <__DATA_REGION_ORIGIN__>
 23e:	8f 3f       	cpi	r24, 0xFF	; 255
 240:	19 f4       	brne	.+6      	; 0x248 <main+0x8a>
			{
				screen1 = display[10];
 242:	a0 92 00 01 	sts	0x0100, r10	; 0x800100 <__DATA_REGION_ORIGIN__>
 246:	02 c0       	rjmp	.+4      	; 0x24c <main+0x8e>
			}else
			{
				screen1 = display[11];
 248:	c0 93 00 01 	sts	0x0100, r28	; 0x800100 <__DATA_REGION_ORIGIN__>
			}
			mudar_rot();
 24c:	9a df       	rcall	.-204    	; 0x182 <mudar_rot>
			break;
 24e:	08 c0       	rjmp	.+16     	; 0x260 <main+0xa2>

			case 4:			// switch_4 - para o motor
			screen3 = display[11];
 250:	c0 93 05 01 	sts	0x0105, r28	; 0x800105 <screen3>
			screen2 = display[11];
 254:	c0 93 02 01 	sts	0x0102, r28	; 0x800102 <screen2>
			screen1 = display[11];
 258:	c0 93 00 01 	sts	0x0100, r28	; 0x800100 <__DATA_REGION_ORIGIN__>
			motor = 0;
 25c:	10 92 04 01 	sts	0x0104, r1	; 0x800104 <motor>
			break;
		}
		switch_=0;
 260:	10 92 03 01 	sts	0x0103, r1	; 0x800103 <switch_>
		OCR2 = DC(motor);
 264:	80 91 04 01 	lds	r24, 0x0104	; 0x800104 <motor>
 268:	c8 9f       	mul	r28, r24
 26a:	c0 01       	movw	r24, r0
 26c:	11 24       	eor	r1, r1
 26e:	b8 01       	movw	r22, r16
 270:	4e d0       	rcall	.+156    	; 0x30e <__divmodhi4>
 272:	63 bd       	out	0x23, r22	; 35
	}
 274:	c1 cf       	rjmp	.-126    	; 0x1f8 <main+0x3a>

00000276 <display_>:
}


void display_(void)
{
	PORTD = 0b11000000;
 276:	80 ec       	ldi	r24, 0xC0	; 192
 278:	82 bb       	out	0x12, r24	; 18
	PORTC = screen3;
 27a:	80 91 05 01 	lds	r24, 0x0105	; 0x800105 <screen3>
 27e:	85 bb       	out	0x15, r24	; 21
 280:	8f e9       	ldi	r24, 0x9F	; 159
 282:	9f e0       	ldi	r25, 0x0F	; 15
 284:	01 97       	sbiw	r24, 0x01	; 1
 286:	f1 f7       	brne	.-4      	; 0x284 <display_+0xe>
 288:	00 c0       	rjmp	.+0      	; 0x28a <display_+0x14>
 28a:	00 00       	nop
	_delay_ms(1);
	PORTD = 0b10000000;
 28c:	80 e8       	ldi	r24, 0x80	; 128
 28e:	82 bb       	out	0x12, r24	; 18
	PORTC = screen2;
 290:	80 91 02 01 	lds	r24, 0x0102	; 0x800102 <screen2>
 294:	85 bb       	out	0x15, r24	; 21
 296:	8f e9       	ldi	r24, 0x9F	; 159
 298:	9f e0       	ldi	r25, 0x0F	; 15
 29a:	01 97       	sbiw	r24, 0x01	; 1
 29c:	f1 f7       	brne	.-4      	; 0x29a <display_+0x24>
 29e:	00 c0       	rjmp	.+0      	; 0x2a0 <display_+0x2a>
 2a0:	00 00       	nop
	_delay_ms(1);
	PORTD = 0b01000000;
 2a2:	80 e4       	ldi	r24, 0x40	; 64
 2a4:	82 bb       	out	0x12, r24	; 18
	PORTC = screen1;
 2a6:	80 91 00 01 	lds	r24, 0x0100	; 0x800100 <__DATA_REGION_ORIGIN__>
 2aa:	85 bb       	out	0x15, r24	; 21
 2ac:	8f e9       	ldi	r24, 0x9F	; 159
 2ae:	9f e0       	ldi	r25, 0x0F	; 15
 2b0:	01 97       	sbiw	r24, 0x01	; 1
 2b2:	f1 f7       	brne	.-4      	; 0x2b0 <display_+0x3a>
 2b4:	00 c0       	rjmp	.+0      	; 0x2b6 <display_+0x40>
 2b6:	00 00       	nop
 2b8:	08 95       	ret

000002ba <__vector_15>:
void mudar_rot(void);
void display_(void);

// rotina interrupção TC0
ISR(TIMER0_COMP_vect)
{
 2ba:	1f 92       	push	r1
 2bc:	0f 92       	push	r0
 2be:	0f b6       	in	r0, 0x3f	; 63
 2c0:	0f 92       	push	r0
 2c2:	11 24       	eor	r1, r1
 2c4:	0b b6       	in	r0, 0x3b	; 59
 2c6:	0f 92       	push	r0
 2c8:	2f 93       	push	r18
 2ca:	3f 93       	push	r19
 2cc:	4f 93       	push	r20
 2ce:	5f 93       	push	r21
 2d0:	6f 93       	push	r22
 2d2:	7f 93       	push	r23
 2d4:	8f 93       	push	r24
 2d6:	9f 93       	push	r25
 2d8:	af 93       	push	r26
 2da:	bf 93       	push	r27
 2dc:	ef 93       	push	r30
 2de:	ff 93       	push	r31
	display_();
 2e0:	ca df       	rcall	.-108    	; 0x276 <display_>
	flag = 1;
 2e2:	81 e0       	ldi	r24, 0x01	; 1
 2e4:	80 93 01 01 	sts	0x0101, r24	; 0x800101 <flag>
}
 2e8:	ff 91       	pop	r31
 2ea:	ef 91       	pop	r30
 2ec:	bf 91       	pop	r27
 2ee:	af 91       	pop	r26
 2f0:	9f 91       	pop	r25
 2f2:	8f 91       	pop	r24
 2f4:	7f 91       	pop	r23
 2f6:	6f 91       	pop	r22
 2f8:	5f 91       	pop	r21
 2fa:	4f 91       	pop	r20
 2fc:	3f 91       	pop	r19
 2fe:	2f 91       	pop	r18
 300:	0f 90       	pop	r0
 302:	0b be       	out	0x3b, r0	; 59
 304:	0f 90       	pop	r0
 306:	0f be       	out	0x3f, r0	; 63
 308:	0f 90       	pop	r0
 30a:	1f 90       	pop	r1
 30c:	18 95       	reti

0000030e <__divmodhi4>:
 30e:	97 fb       	bst	r25, 7
 310:	07 2e       	mov	r0, r23
 312:	16 f4       	brtc	.+4      	; 0x318 <__divmodhi4+0xa>
 314:	00 94       	com	r0
 316:	06 d0       	rcall	.+12     	; 0x324 <__divmodhi4_neg1>
 318:	77 fd       	sbrc	r23, 7
 31a:	08 d0       	rcall	.+16     	; 0x32c <__divmodhi4_neg2>
 31c:	0b d0       	rcall	.+22     	; 0x334 <__udivmodhi4>
 31e:	07 fc       	sbrc	r0, 7
 320:	05 d0       	rcall	.+10     	; 0x32c <__divmodhi4_neg2>
 322:	3e f4       	brtc	.+14     	; 0x332 <__divmodhi4_exit>

00000324 <__divmodhi4_neg1>:
 324:	90 95       	com	r25
 326:	81 95       	neg	r24
 328:	9f 4f       	sbci	r25, 0xFF	; 255
 32a:	08 95       	ret

0000032c <__divmodhi4_neg2>:
 32c:	70 95       	com	r23
 32e:	61 95       	neg	r22
 330:	7f 4f       	sbci	r23, 0xFF	; 255

00000332 <__divmodhi4_exit>:
 332:	08 95       	ret

00000334 <__udivmodhi4>:
 334:	aa 1b       	sub	r26, r26
 336:	bb 1b       	sub	r27, r27
 338:	51 e1       	ldi	r21, 0x11	; 17
 33a:	07 c0       	rjmp	.+14     	; 0x34a <__udivmodhi4_ep>

0000033c <__udivmodhi4_loop>:
 33c:	aa 1f       	adc	r26, r26
 33e:	bb 1f       	adc	r27, r27
 340:	a6 17       	cp	r26, r22
 342:	b7 07       	cpc	r27, r23
 344:	10 f0       	brcs	.+4      	; 0x34a <__udivmodhi4_ep>
 346:	a6 1b       	sub	r26, r22
 348:	b7 0b       	sbc	r27, r23

0000034a <__udivmodhi4_ep>:
 34a:	88 1f       	adc	r24, r24
 34c:	99 1f       	adc	r25, r25
 34e:	5a 95       	dec	r21
 350:	a9 f7       	brne	.-22     	; 0x33c <__udivmodhi4_loop>
 352:	80 95       	com	r24
 354:	90 95       	com	r25
 356:	bc 01       	movw	r22, r24
 358:	cd 01       	movw	r24, r26
 35a:	08 95       	ret

0000035c <_exit>:
 35c:	f8 94       	cli

0000035e <__stop_program>:
 35e:	ff cf       	rjmp	.-2      	; 0x35e <__stop_program>
