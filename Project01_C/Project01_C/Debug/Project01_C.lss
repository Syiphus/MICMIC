
Project01_C.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .data         00000000  00800100  00800100  00000402  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  1 .text         0000038e  00000000  00000000  00000074  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .bss          00000007  00800100  00800100  00000402  2**0
                  ALLOC
  3 .comment      00000030  00000000  00000000  00000402  2**0
                  CONTENTS, READONLY
  4 .note.gnu.avr.deviceinfo 0000003c  00000000  00000000  00000434  2**2
                  CONTENTS, READONLY
  5 .debug_aranges 00000060  00000000  00000000  00000470  2**0
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_info   00000afd  00000000  00000000  000004d0  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_abbrev 00000887  00000000  00000000  00000fcd  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_line   00000500  00000000  00000000  00001854  2**0
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_frame  0000012c  00000000  00000000  00001d54  2**2
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_str    000004a5  00000000  00000000  00001e80  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_loc    0000031d  00000000  00000000  00002325  2**0
                  CONTENTS, READONLY, DEBUGGING
 12 .debug_ranges 00000050  00000000  00000000  00002642  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
   0:	45 c0       	rjmp	.+138    	; 0x8c <__ctors_end>
   2:	00 00       	nop
   4:	7f c0       	rjmp	.+254    	; 0x104 <__vector_1>
   6:	00 00       	nop
   8:	8c c0       	rjmp	.+280    	; 0x122 <__vector_2>
   a:	00 00       	nop
   c:	99 c0       	rjmp	.+306    	; 0x140 <__vector_3>
   e:	00 00       	nop
  10:	a6 c0       	rjmp	.+332    	; 0x15e <__vector_4>
  12:	00 00       	nop
  14:	58 c0       	rjmp	.+176    	; 0xc6 <__bad_interrupt>
  16:	00 00       	nop
  18:	56 c0       	rjmp	.+172    	; 0xc6 <__bad_interrupt>
  1a:	00 00       	nop
  1c:	54 c0       	rjmp	.+168    	; 0xc6 <__bad_interrupt>
  1e:	00 00       	nop
  20:	52 c0       	rjmp	.+164    	; 0xc6 <__bad_interrupt>
  22:	00 00       	nop
  24:	50 c0       	rjmp	.+160    	; 0xc6 <__bad_interrupt>
  26:	00 00       	nop
  28:	4e c0       	rjmp	.+156    	; 0xc6 <__bad_interrupt>
  2a:	00 00       	nop
  2c:	4c c0       	rjmp	.+152    	; 0xc6 <__bad_interrupt>
  2e:	00 00       	nop
  30:	4a c0       	rjmp	.+148    	; 0xc6 <__bad_interrupt>
  32:	00 00       	nop
  34:	48 c0       	rjmp	.+144    	; 0xc6 <__bad_interrupt>
  36:	00 00       	nop
  38:	46 c0       	rjmp	.+140    	; 0xc6 <__bad_interrupt>
  3a:	00 00       	nop
  3c:	55 c1       	rjmp	.+682    	; 0x2e8 <__vector_15>
  3e:	00 00       	nop
  40:	42 c0       	rjmp	.+132    	; 0xc6 <__bad_interrupt>
  42:	00 00       	nop
  44:	40 c0       	rjmp	.+128    	; 0xc6 <__bad_interrupt>
  46:	00 00       	nop
  48:	3e c0       	rjmp	.+124    	; 0xc6 <__bad_interrupt>
  4a:	00 00       	nop
  4c:	3c c0       	rjmp	.+120    	; 0xc6 <__bad_interrupt>
  4e:	00 00       	nop
  50:	3a c0       	rjmp	.+116    	; 0xc6 <__bad_interrupt>
  52:	00 00       	nop
  54:	38 c0       	rjmp	.+112    	; 0xc6 <__bad_interrupt>
  56:	00 00       	nop
  58:	36 c0       	rjmp	.+108    	; 0xc6 <__bad_interrupt>
  5a:	00 00       	nop
  5c:	34 c0       	rjmp	.+104    	; 0xc6 <__bad_interrupt>
  5e:	00 00       	nop
  60:	32 c0       	rjmp	.+100    	; 0xc6 <__bad_interrupt>
  62:	00 00       	nop
  64:	30 c0       	rjmp	.+96     	; 0xc6 <__bad_interrupt>
  66:	00 00       	nop
  68:	2e c0       	rjmp	.+92     	; 0xc6 <__bad_interrupt>
  6a:	00 00       	nop
  6c:	2c c0       	rjmp	.+88     	; 0xc6 <__bad_interrupt>
  6e:	00 00       	nop
  70:	2a c0       	rjmp	.+84     	; 0xc6 <__bad_interrupt>
  72:	00 00       	nop
  74:	28 c0       	rjmp	.+80     	; 0xc6 <__bad_interrupt>
  76:	00 00       	nop
  78:	26 c0       	rjmp	.+76     	; 0xc6 <__bad_interrupt>
  7a:	00 00       	nop
  7c:	24 c0       	rjmp	.+72     	; 0xc6 <__bad_interrupt>
  7e:	00 00       	nop
  80:	22 c0       	rjmp	.+68     	; 0xc6 <__bad_interrupt>
  82:	00 00       	nop
  84:	20 c0       	rjmp	.+64     	; 0xc6 <__bad_interrupt>
  86:	00 00       	nop
  88:	1e c0       	rjmp	.+60     	; 0xc6 <__bad_interrupt>
	...

0000008c <__ctors_end>:
  8c:	11 24       	eor	r1, r1
  8e:	1f be       	out	0x3f, r1	; 63
  90:	cf ef       	ldi	r28, 0xFF	; 255
  92:	d0 e1       	ldi	r29, 0x10	; 16
  94:	de bf       	out	0x3e, r29	; 62
  96:	cd bf       	out	0x3d, r28	; 61

00000098 <__do_copy_data>:
  98:	11 e0       	ldi	r17, 0x01	; 1
  9a:	a0 e0       	ldi	r26, 0x00	; 0
  9c:	b1 e0       	ldi	r27, 0x01	; 1
  9e:	ee e8       	ldi	r30, 0x8E	; 142
  a0:	f3 e0       	ldi	r31, 0x03	; 3
  a2:	00 e0       	ldi	r16, 0x00	; 0
  a4:	0b bf       	out	0x3b, r16	; 59
  a6:	02 c0       	rjmp	.+4      	; 0xac <__do_copy_data+0x14>
  a8:	07 90       	elpm	r0, Z+
  aa:	0d 92       	st	X+, r0
  ac:	a0 30       	cpi	r26, 0x00	; 0
  ae:	b1 07       	cpc	r27, r17
  b0:	d9 f7       	brne	.-10     	; 0xa8 <__do_copy_data+0x10>

000000b2 <__do_clear_bss>:
  b2:	21 e0       	ldi	r18, 0x01	; 1
  b4:	a0 e0       	ldi	r26, 0x00	; 0
  b6:	b1 e0       	ldi	r27, 0x01	; 1
  b8:	01 c0       	rjmp	.+2      	; 0xbc <.do_clear_bss_start>

000000ba <.do_clear_bss_loop>:
  ba:	1d 92       	st	X+, r1

000000bc <.do_clear_bss_start>:
  bc:	a7 30       	cpi	r26, 0x07	; 7
  be:	b2 07       	cpc	r27, r18
  c0:	e1 f7       	brne	.-8      	; 0xba <.do_clear_bss_loop>
  c2:	7a d0       	rcall	.+244    	; 0x1b8 <main>
  c4:	62 c1       	rjmp	.+708    	; 0x38a <_exit>

000000c6 <__bad_interrupt>:
  c6:	9c cf       	rjmp	.-200    	; 0x0 <__vectors>

000000c8 <inic>:

/*This is the initialization function where all the starting commands will be performed (such as defining ports and interrupts)*/
void inic(void)
{
	/* Pin 7 and 8 will be used as outputs so we can select which display we intend to use*/
	DDRD = 0b11000000;			
  c8:	80 ec       	ldi	r24, 0xC0	; 192
  ca:	81 bb       	out	0x11, r24	; 17
	/*In this couple of lines we initialize PORTC as output and make sure that all the displays are turned off*/
	DDRC = 0b11111111;
  cc:	8f ef       	ldi	r24, 0xFF	; 255
  ce:	84 bb       	out	0x14, r24	; 20
	screen3 = display[11];
  d0:	80 93 06 01 	sts	0x0106, r24	; 0x800106 <screen3>
	screen2 = display[11];
  d4:	80 93 03 01 	sts	0x0103, r24	; 0x800103 <screen2>
	screen1 = display[11];
  d8:	80 93 01 01 	sts	0x0101, r24	; 0x800101 <screen1>
	/*PortB is the one used for the motor and is initialized in this 2 lines*/
	DDRB = 0b11100000;
  dc:	80 ee       	ldi	r24, 0xE0	; 224
  de:	87 bb       	out	0x17, r24	; 23
	PORTB = 0b00100000;
  e0:	80 e2       	ldi	r24, 0x20	; 32
  e2:	88 bb       	out	0x18, r24	; 24
	
	/*External interrupts are initialized here which will be used to determine which of the switches were pressed*/
	EICRA = 0b10101010;
  e4:	8a ea       	ldi	r24, 0xAA	; 170
  e6:	80 93 6a 00 	sts	0x006A, r24	; 0x80006a <__TEXT_REGION_LENGTH__+0x7e006a>
	EIMSK = 0b00001111;
  ea:	8f e0       	ldi	r24, 0x0F	; 15
  ec:	89 bf       	out	0x39, r24	; 57
	/*Here we initialize the Timer/Counter 0 with a prescaler of 1024 giving us a time of 5ms*/
	OCR0 = 77;
  ee:	9d e4       	ldi	r25, 0x4D	; 77
  f0:	91 bf       	out	0x31, r25	; 49
	TCCR0 = 0b00001111;    
  f2:	83 bf       	out	0x33, r24	; 51
	TIMSK |= 0b00000010;    
  f4:	87 b7       	in	r24, 0x37	; 55
  f6:	82 60       	ori	r24, 0x02	; 2
  f8:	87 bf       	out	0x37, r24	; 55
	/*OCR2 is where we give the microcontroler the information of the speed we want it to operate in, we forced it to start turned off,
	this uses the Timer/Counter 2 so we also initialized it TC2 witch a prescaler of 64 mode 1 and phase correct*/
	OCR2 = DC(0);
  fa:	13 bc       	out	0x23, r1	; 35
	TCCR2 = 0b01100011;
  fc:	83 e6       	ldi	r24, 0x63	; 99
  fe:	85 bd       	out	0x25, r24	; 37
	
	sei();
 100:	78 94       	sei
 102:	08 95       	ret

00000104 <__vector_1>:
	display_();
	flag = 1;
}

ISR(INT0_vect) 
{
 104:	1f 92       	push	r1
 106:	0f 92       	push	r0
 108:	0f b6       	in	r0, 0x3f	; 63
 10a:	0f 92       	push	r0
 10c:	11 24       	eor	r1, r1
 10e:	8f 93       	push	r24
	switch_=1;
 110:	81 e0       	ldi	r24, 0x01	; 1
 112:	80 93 04 01 	sts	0x0104, r24	; 0x800104 <switch_>
}
 116:	8f 91       	pop	r24
 118:	0f 90       	pop	r0
 11a:	0f be       	out	0x3f, r0	; 63
 11c:	0f 90       	pop	r0
 11e:	1f 90       	pop	r1
 120:	18 95       	reti

00000122 <__vector_2>:

ISR(INT1_vect) 
{
 122:	1f 92       	push	r1
 124:	0f 92       	push	r0
 126:	0f b6       	in	r0, 0x3f	; 63
 128:	0f 92       	push	r0
 12a:	11 24       	eor	r1, r1
 12c:	8f 93       	push	r24
	switch_=2;
 12e:	82 e0       	ldi	r24, 0x02	; 2
 130:	80 93 04 01 	sts	0x0104, r24	; 0x800104 <switch_>
}
 134:	8f 91       	pop	r24
 136:	0f 90       	pop	r0
 138:	0f be       	out	0x3f, r0	; 63
 13a:	0f 90       	pop	r0
 13c:	1f 90       	pop	r1
 13e:	18 95       	reti

00000140 <__vector_3>:

ISR(INT2_vect)
{
 140:	1f 92       	push	r1
 142:	0f 92       	push	r0
 144:	0f b6       	in	r0, 0x3f	; 63
 146:	0f 92       	push	r0
 148:	11 24       	eor	r1, r1
 14a:	8f 93       	push	r24
	switch_=3;
 14c:	83 e0       	ldi	r24, 0x03	; 3
 14e:	80 93 04 01 	sts	0x0104, r24	; 0x800104 <switch_>
}
 152:	8f 91       	pop	r24
 154:	0f 90       	pop	r0
 156:	0f be       	out	0x3f, r0	; 63
 158:	0f 90       	pop	r0
 15a:	1f 90       	pop	r1
 15c:	18 95       	reti

0000015e <__vector_4>:

ISR(INT3_vect)
{
 15e:	1f 92       	push	r1
 160:	0f 92       	push	r0
 162:	0f b6       	in	r0, 0x3f	; 63
 164:	0f 92       	push	r0
 166:	11 24       	eor	r1, r1
 168:	8f 93       	push	r24
	switch_=4;
 16a:	84 e0       	ldi	r24, 0x04	; 4
 16c:	80 93 04 01 	sts	0x0104, r24	; 0x800104 <switch_>
}
 170:	8f 91       	pop	r24
 172:	0f 90       	pop	r0
 174:	0f be       	out	0x3f, r0	; 63
 176:	0f 90       	pop	r0
 178:	1f 90       	pop	r1
 17a:	18 95       	reti

0000017c <mudar_rot>:
	}
}
/*In this function the direction of the motor will be checked and changed */
void mudar_rot(void)
{
	if (PORTB & (1<<5))
 17c:	c5 9b       	sbis	0x18, 5	; 24
 17e:	0e c0       	rjmp	.+28     	; 0x19c <mudar_rot+0x20>
	{
		PORTB |=(1<<5)|(1<<6);
 180:	88 b3       	in	r24, 0x18	; 24
 182:	80 66       	ori	r24, 0x60	; 96
 184:	88 bb       	out	0x18, r24	; 24
	#else
		//round up by default
		__ticks_dc = (uint32_t)(ceil(fabs(__tmp)));
	#endif

	__builtin_avr_delay_cycles(__ticks_dc);
 186:	2f ef       	ldi	r18, 0xFF	; 255
 188:	89 e6       	ldi	r24, 0x69	; 105
 18a:	98 e1       	ldi	r25, 0x18	; 24
 18c:	21 50       	subi	r18, 0x01	; 1
 18e:	80 40       	sbci	r24, 0x00	; 0
 190:	90 40       	sbci	r25, 0x00	; 0
 192:	e1 f7       	brne	.-8      	; 0x18c <mudar_rot+0x10>
 194:	00 c0       	rjmp	.+0      	; 0x196 <mudar_rot+0x1a>
 196:	00 00       	nop
		_delay_ms(500);
		PORTB &=~(1<<5);
 198:	c5 98       	cbi	0x18, 5	; 24
 19a:	08 95       	ret
	}else
	{
		PORTB |=(1<<5)|(1<<6);
 19c:	88 b3       	in	r24, 0x18	; 24
 19e:	80 66       	ori	r24, 0x60	; 96
 1a0:	88 bb       	out	0x18, r24	; 24
 1a2:	2f ef       	ldi	r18, 0xFF	; 255
 1a4:	89 e6       	ldi	r24, 0x69	; 105
 1a6:	98 e1       	ldi	r25, 0x18	; 24
 1a8:	21 50       	subi	r18, 0x01	; 1
 1aa:	80 40       	sbci	r24, 0x00	; 0
 1ac:	90 40       	sbci	r25, 0x00	; 0
 1ae:	e1 f7       	brne	.-8      	; 0x1a8 <mudar_rot+0x2c>
 1b0:	00 c0       	rjmp	.+0      	; 0x1b2 <mudar_rot+0x36>
 1b2:	00 00       	nop
		_delay_ms(500);
		PORTB &=~(1<<6);
 1b4:	c6 98       	cbi	0x18, 6	; 24
 1b6:	08 95       	ret

000001b8 <main>:
}

/*This is our main function where there is a case/switch that will operate acording to the switches that are pressed*/
int main(void)
{
	inic();
 1b8:	87 df       	rcall	.-242    	; 0xc8 <inic>
			break;
			
			/*Switch 2 will make the motor rotate at 25% of its nominal speed, and save the value "25" in variables
			 so it is displayed in the 7 segment display*/
			case 2:	
			screen3 = display[0];
 1ba:	0f 2e       	mov	r0, r31
 1bc:	f0 ec       	ldi	r31, 0xC0	; 192
 1be:	bf 2e       	mov	r11, r31
 1c0:	f0 2d       	mov	r31, r0
			screen2 = display[7];
 1c2:	0f 2e       	mov	r0, r31
 1c4:	f8 ef       	ldi	r31, 0xF8	; 248
 1c6:	cf 2e       	mov	r12, r31
 1c8:	f0 2d       	mov	r31, r0
			if(negative == 1)
			{
				screen1 = display[10];
			}
			motor = 70;
 1ca:	0f 2e       	mov	r0, r31
 1cc:	f6 e4       	ldi	r31, 0x46	; 70
 1ce:	df 2e       	mov	r13, r31
 1d0:	f0 2d       	mov	r31, r0
			case 2:	
			screen3 = display[0];
			screen2 = display[7];
			if(negative == 1)
			{
				screen1 = display[10];
 1d2:	0f 2e       	mov	r0, r31
 1d4:	ff eb       	ldi	r31, 0xBF	; 191
 1d6:	af 2e       	mov	r10, r31
 1d8:	f0 2d       	mov	r31, r0
			{
				screen1 = display[10];
				negative = 1;
			}else
			{
				screen1 = display[11];
 1da:	cf ef       	ldi	r28, 0xFF	; 255
			if(flag==0) break;
			flag = 0;
			if(screen1 == display[11] && negative == 0)
			{
				screen1 = display[10];
				negative = 1;
 1dc:	99 24       	eor	r9, r9
 1de:	93 94       	inc	r9
		switch(switch_)
		{
			/*Switch 1 will make the motor rotate at 25% of its nominal speed, and save the value "25" in variables
			 so it is displayed in the 7 segment display*/
			case 1:	
			screen3 = display[5];
 1e0:	0f 2e       	mov	r0, r31
 1e2:	f2 e9       	ldi	r31, 0x92	; 146
 1e4:	ef 2e       	mov	r14, r31
 1e6:	f0 2d       	mov	r31, r0
			screen2 = display[2];
 1e8:	0f 2e       	mov	r0, r31
 1ea:	f4 ea       	ldi	r31, 0xA4	; 164
 1ec:	ff 2e       	mov	r15, r31
 1ee:	f0 2d       	mov	r31, r0
			if(negative == 1)
			{
				screen1 = display[10];
			}
			motor = 25;
 1f0:	d9 e1       	ldi	r29, 0x19	; 25
			break;
		}
		/*Resets the value of the switch*/
		switch_=0;
		/*Changes the motor speed*/
		OCR2 = DC(motor);
 1f2:	04 e6       	ldi	r16, 0x64	; 100
 1f4:	10 e0       	ldi	r17, 0x00	; 0
{
	inic();
	
	while (1)
	{
		switch(switch_)
 1f6:	80 91 04 01 	lds	r24, 0x0104	; 0x800104 <switch_>
 1fa:	82 30       	cpi	r24, 0x02	; 2
 1fc:	b1 f0       	breq	.+44     	; 0x22a <main+0x72>
 1fe:	18 f4       	brcc	.+6      	; 0x206 <main+0x4e>
 200:	81 30       	cpi	r24, 0x01	; 1
 202:	31 f0       	breq	.+12     	; 0x210 <main+0x58>
 204:	40 c0       	rjmp	.+128    	; 0x286 <main+0xce>
 206:	83 30       	cpi	r24, 0x03	; 3
 208:	e9 f0       	breq	.+58     	; 0x244 <main+0x8c>
 20a:	84 30       	cpi	r24, 0x04	; 4
 20c:	a1 f1       	breq	.+104    	; 0x276 <main+0xbe>
 20e:	3b c0       	rjmp	.+118    	; 0x286 <main+0xce>
		{
			/*Switch 1 will make the motor rotate at 25% of its nominal speed, and save the value "25" in variables
			 so it is displayed in the 7 segment display*/
			case 1:	
			screen3 = display[5];
 210:	e0 92 06 01 	sts	0x0106, r14	; 0x800106 <screen3>
			screen2 = display[2];
 214:	f0 92 03 01 	sts	0x0103, r15	; 0x800103 <screen2>
			if(negative == 1)
 218:	80 91 00 01 	lds	r24, 0x0100	; 0x800100 <__DATA_REGION_ORIGIN__>
 21c:	81 30       	cpi	r24, 0x01	; 1
 21e:	11 f4       	brne	.+4      	; 0x224 <main+0x6c>
			{
				screen1 = display[10];
 220:	a0 92 01 01 	sts	0x0101, r10	; 0x800101 <screen1>
			}
			motor = 25;
 224:	d0 93 05 01 	sts	0x0105, r29	; 0x800105 <motor>
			break;
 228:	2e c0       	rjmp	.+92     	; 0x286 <main+0xce>
			
			/*Switch 2 will make the motor rotate at 25% of its nominal speed, and save the value "25" in variables
			 so it is displayed in the 7 segment display*/
			case 2:	
			screen3 = display[0];
 22a:	b0 92 06 01 	sts	0x0106, r11	; 0x800106 <screen3>
			screen2 = display[7];
 22e:	c0 92 03 01 	sts	0x0103, r12	; 0x800103 <screen2>
			if(negative == 1)
 232:	80 91 00 01 	lds	r24, 0x0100	; 0x800100 <__DATA_REGION_ORIGIN__>
 236:	81 30       	cpi	r24, 0x01	; 1
 238:	11 f4       	brne	.+4      	; 0x23e <main+0x86>
			{
				screen1 = display[10];
 23a:	a0 92 01 01 	sts	0x0101, r10	; 0x800101 <screen1>
			}
			motor = 70;
 23e:	d0 92 05 01 	sts	0x0105, r13	; 0x800105 <motor>
			break;
 242:	21 c0       	rjmp	.+66     	; 0x286 <main+0xce>
			
			/*Switch 3 will check what value is being currently displayed ( "-" or " " ) and call the function that will make the motor
			switch the direction of its rotation*/
			case 3:	
			if(flag==0) break;
 244:	80 91 02 01 	lds	r24, 0x0102	; 0x800102 <flag>
 248:	88 23       	and	r24, r24
 24a:	e9 f0       	breq	.+58     	; 0x286 <main+0xce>
			flag = 0;
 24c:	10 92 02 01 	sts	0x0102, r1	; 0x800102 <flag>
			if(screen1 == display[11] && negative == 0)
 250:	80 91 01 01 	lds	r24, 0x0101	; 0x800101 <screen1>
 254:	8f 3f       	cpi	r24, 0xFF	; 255
 256:	49 f4       	brne	.+18     	; 0x26a <main+0xb2>
 258:	80 91 00 01 	lds	r24, 0x0100	; 0x800100 <__DATA_REGION_ORIGIN__>
 25c:	81 11       	cpse	r24, r1
 25e:	05 c0       	rjmp	.+10     	; 0x26a <main+0xb2>
			{
				screen1 = display[10];
 260:	a0 92 01 01 	sts	0x0101, r10	; 0x800101 <screen1>
				negative = 1;
 264:	90 92 00 01 	sts	0x0100, r9	; 0x800100 <__DATA_REGION_ORIGIN__>
 268:	04 c0       	rjmp	.+8      	; 0x272 <main+0xba>
			}else
			{
				screen1 = display[11];
 26a:	c0 93 01 01 	sts	0x0101, r28	; 0x800101 <screen1>
				negative = 0;
 26e:	10 92 00 01 	sts	0x0100, r1	; 0x800100 <__DATA_REGION_ORIGIN__>
			}
			mudar_rot();
 272:	84 df       	rcall	.-248    	; 0x17c <mudar_rot>
			break;
 274:	08 c0       	rjmp	.+16     	; 0x286 <main+0xce>
			/*Switch 4 will make the motor stop and turn of the display*/
			case 4:	
			screen3 = display[11];
 276:	c0 93 06 01 	sts	0x0106, r28	; 0x800106 <screen3>
			screen2 = display[11];
 27a:	c0 93 03 01 	sts	0x0103, r28	; 0x800103 <screen2>
			screen1 = display[11];
 27e:	c0 93 01 01 	sts	0x0101, r28	; 0x800101 <screen1>
			motor = 0;
 282:	10 92 05 01 	sts	0x0105, r1	; 0x800105 <motor>
			break;
		}
		/*Resets the value of the switch*/
		switch_=0;
 286:	10 92 04 01 	sts	0x0104, r1	; 0x800104 <switch_>
		/*Changes the motor speed*/
		OCR2 = DC(motor);
 28a:	80 91 05 01 	lds	r24, 0x0105	; 0x800105 <motor>
 28e:	c8 9f       	mul	r28, r24
 290:	c0 01       	movw	r24, r0
 292:	11 24       	eor	r1, r1
 294:	b8 01       	movw	r22, r16
 296:	52 d0       	rcall	.+164    	; 0x33c <__divmodhi4>
 298:	63 bd       	out	0x23, r22	; 35
	}
 29a:	ad cf       	rjmp	.-166    	; 0x1f6 <main+0x3e>

0000029c <display_>:
}

/*In this function we update the display with the values of the variables given from the above functions*/
void display_(void)
{
	PORTD = 0b11000000;
 29c:	80 ec       	ldi	r24, 0xC0	; 192
 29e:	82 bb       	out	0x12, r24	; 18
	PORTC = screen3;
 2a0:	80 91 06 01 	lds	r24, 0x0106	; 0x800106 <screen3>
 2a4:	85 bb       	out	0x15, r24	; 21
 2a6:	8f e9       	ldi	r24, 0x9F	; 159
 2a8:	9f e0       	ldi	r25, 0x0F	; 15
 2aa:	01 97       	sbiw	r24, 0x01	; 1
 2ac:	f1 f7       	brne	.-4      	; 0x2aa <display_+0xe>
 2ae:	00 c0       	rjmp	.+0      	; 0x2b0 <display_+0x14>
 2b0:	00 00       	nop
	_delay_ms(1);
	PORTD = 0b10000000;
 2b2:	80 e8       	ldi	r24, 0x80	; 128
 2b4:	82 bb       	out	0x12, r24	; 18
	PORTC = screen2;
 2b6:	80 91 03 01 	lds	r24, 0x0103	; 0x800103 <screen2>
 2ba:	85 bb       	out	0x15, r24	; 21
 2bc:	8f e9       	ldi	r24, 0x9F	; 159
 2be:	9f e0       	ldi	r25, 0x0F	; 15
 2c0:	01 97       	sbiw	r24, 0x01	; 1
 2c2:	f1 f7       	brne	.-4      	; 0x2c0 <display_+0x24>
 2c4:	00 c0       	rjmp	.+0      	; 0x2c6 <display_+0x2a>
 2c6:	00 00       	nop
	_delay_ms(1);
	PORTD = 0b01000000;
 2c8:	80 e4       	ldi	r24, 0x40	; 64
 2ca:	82 bb       	out	0x12, r24	; 18
	/*This "if" condition is used to make sure the "-" sign wont appear when the motor is off*/
	if(motor!=0){
 2cc:	80 91 05 01 	lds	r24, 0x0105	; 0x800105 <motor>
 2d0:	88 23       	and	r24, r24
 2d2:	49 f0       	breq	.+18     	; 0x2e6 <display_+0x4a>
	PORTC = screen1;
 2d4:	80 91 01 01 	lds	r24, 0x0101	; 0x800101 <screen1>
 2d8:	85 bb       	out	0x15, r24	; 21
 2da:	8f e9       	ldi	r24, 0x9F	; 159
 2dc:	9f e0       	ldi	r25, 0x0F	; 15
 2de:	01 97       	sbiw	r24, 0x01	; 1
 2e0:	f1 f7       	brne	.-4      	; 0x2de <display_+0x42>
 2e2:	00 c0       	rjmp	.+0      	; 0x2e4 <display_+0x48>
 2e4:	00 00       	nop
 2e6:	08 95       	ret

000002e8 <__vector_15>:
void mudar_rot(void);
void display_(void);

/*This is the interrupt functions starting with the Timer/Counter 0 and followed by the switches*/
ISR(TIMER0_COMP_vect)
{
 2e8:	1f 92       	push	r1
 2ea:	0f 92       	push	r0
 2ec:	0f b6       	in	r0, 0x3f	; 63
 2ee:	0f 92       	push	r0
 2f0:	11 24       	eor	r1, r1
 2f2:	0b b6       	in	r0, 0x3b	; 59
 2f4:	0f 92       	push	r0
 2f6:	2f 93       	push	r18
 2f8:	3f 93       	push	r19
 2fa:	4f 93       	push	r20
 2fc:	5f 93       	push	r21
 2fe:	6f 93       	push	r22
 300:	7f 93       	push	r23
 302:	8f 93       	push	r24
 304:	9f 93       	push	r25
 306:	af 93       	push	r26
 308:	bf 93       	push	r27
 30a:	ef 93       	push	r30
 30c:	ff 93       	push	r31
	display_();
 30e:	c6 df       	rcall	.-116    	; 0x29c <display_>
	flag = 1;
 310:	81 e0       	ldi	r24, 0x01	; 1
 312:	80 93 02 01 	sts	0x0102, r24	; 0x800102 <flag>
}
 316:	ff 91       	pop	r31
 318:	ef 91       	pop	r30
 31a:	bf 91       	pop	r27
 31c:	af 91       	pop	r26
 31e:	9f 91       	pop	r25
 320:	8f 91       	pop	r24
 322:	7f 91       	pop	r23
 324:	6f 91       	pop	r22
 326:	5f 91       	pop	r21
 328:	4f 91       	pop	r20
 32a:	3f 91       	pop	r19
 32c:	2f 91       	pop	r18
 32e:	0f 90       	pop	r0
 330:	0b be       	out	0x3b, r0	; 59
 332:	0f 90       	pop	r0
 334:	0f be       	out	0x3f, r0	; 63
 336:	0f 90       	pop	r0
 338:	1f 90       	pop	r1
 33a:	18 95       	reti

0000033c <__divmodhi4>:
 33c:	97 fb       	bst	r25, 7
 33e:	07 2e       	mov	r0, r23
 340:	16 f4       	brtc	.+4      	; 0x346 <__divmodhi4+0xa>
 342:	00 94       	com	r0
 344:	06 d0       	rcall	.+12     	; 0x352 <__divmodhi4_neg1>
 346:	77 fd       	sbrc	r23, 7
 348:	08 d0       	rcall	.+16     	; 0x35a <__divmodhi4_neg2>
 34a:	0b d0       	rcall	.+22     	; 0x362 <__udivmodhi4>
 34c:	07 fc       	sbrc	r0, 7
 34e:	05 d0       	rcall	.+10     	; 0x35a <__divmodhi4_neg2>
 350:	3e f4       	brtc	.+14     	; 0x360 <__divmodhi4_exit>

00000352 <__divmodhi4_neg1>:
 352:	90 95       	com	r25
 354:	81 95       	neg	r24
 356:	9f 4f       	sbci	r25, 0xFF	; 255
 358:	08 95       	ret

0000035a <__divmodhi4_neg2>:
 35a:	70 95       	com	r23
 35c:	61 95       	neg	r22
 35e:	7f 4f       	sbci	r23, 0xFF	; 255

00000360 <__divmodhi4_exit>:
 360:	08 95       	ret

00000362 <__udivmodhi4>:
 362:	aa 1b       	sub	r26, r26
 364:	bb 1b       	sub	r27, r27
 366:	51 e1       	ldi	r21, 0x11	; 17
 368:	07 c0       	rjmp	.+14     	; 0x378 <__udivmodhi4_ep>

0000036a <__udivmodhi4_loop>:
 36a:	aa 1f       	adc	r26, r26
 36c:	bb 1f       	adc	r27, r27
 36e:	a6 17       	cp	r26, r22
 370:	b7 07       	cpc	r27, r23
 372:	10 f0       	brcs	.+4      	; 0x378 <__udivmodhi4_ep>
 374:	a6 1b       	sub	r26, r22
 376:	b7 0b       	sbc	r27, r23

00000378 <__udivmodhi4_ep>:
 378:	88 1f       	adc	r24, r24
 37a:	99 1f       	adc	r25, r25
 37c:	5a 95       	dec	r21
 37e:	a9 f7       	brne	.-22     	; 0x36a <__udivmodhi4_loop>
 380:	80 95       	com	r24
 382:	90 95       	com	r25
 384:	bc 01       	movw	r22, r24
 386:	cd 01       	movw	r24, r26
 388:	08 95       	ret

0000038a <_exit>:
 38a:	f8 94       	cli

0000038c <__stop_program>:
 38c:	ff cf       	rjmp	.-2      	; 0x38c <__stop_program>
